
obstacle-avoiding-bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d4  080020d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020d4  080020d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020d4  080020d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d8  080020d8  000120d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080020e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080020e8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adf3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e5  00000000  00000000  0002ae2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002c518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  0002d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024328  00000000  00000000  0002dc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009552  00000000  00000000  00051f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee312  00000000  00000000  0005b48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014979c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003174  00000000  00000000  00149818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080020ac 	.word	0x080020ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080020ac 	.word	0x080020ac

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9f3 	bl	8000606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f816 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8ca 	bl	80003bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f85e 	bl	80002e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);	// start timer
 800022c:	4806      	ldr	r0, [pc, #24]	; (8000248 <main+0x30>)
 800022e:	f001 fb0b 	bl	8001848 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <main+0x34>)
 8000238:	f000 fcde 	bl	8000bf8 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f7      	beq.n	8000232 <main+0x1a>
	  {
		  getDistance();
 8000242:	f001 feed 	bl	8002020 <getDistance>
	  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000246:	e7f4      	b.n	8000232 <main+0x1a>
 8000248:	2000002c 	.word	0x2000002c
 800024c:	48000800 	.word	0x48000800

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2238      	movs	r2, #56	; 0x38
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 ff1c 	bl	800209c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fcf0 	bl	8000c58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000280:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2340      	movs	r3, #64	; 0x40
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028a:	2302      	movs	r3, #2
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800028e:	2304      	movs	r3, #4
 8000290:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000292:	2355      	movs	r3, #85	; 0x55
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fd7a 	bl	8000da0 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b2:	f000 f8f7 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2303      	movs	r3, #3
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2104      	movs	r1, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f87e 	bl	80013d0 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002da:	f000 f8e3 	bl	80004a4 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3750      	adds	r7, #80	; 0x50
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b094      	sub	sp, #80	; 0x50
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2234      	movs	r2, #52	; 0x34
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fec4 	bl	800209c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000316:	4a28      	ldr	r2, [pc, #160]	; (80003b8 <MX_TIM1_Init+0xd0>)
 8000318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 800031a:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <MX_TIM1_Init+0xcc>)
 800031c:	22a9      	movs	r2, #169	; 0xa9
 800031e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8000326:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000328:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800032c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000334:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000336:	2200      	movs	r2, #0
 8000338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_TIM1_Init+0xcc>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000340:	481c      	ldr	r0, [pc, #112]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000342:	f001 fa29 	bl	8001798 <HAL_TIM_Base_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800034c:	f000 f8aa 	bl	80004a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000354:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800035a:	4619      	mov	r1, r3
 800035c:	4815      	ldr	r0, [pc, #84]	; (80003b4 <MX_TIM1_Init+0xcc>)
 800035e:	f001 fae3 	bl	8001928 <HAL_TIM_ConfigClockSource>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000368:	f000 f89c 	bl	80004a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000378:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800037c:	4619      	mov	r1, r3
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <MX_TIM1_Init+0xcc>)
 8000380:	f001 fd06 	bl	8001d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800038a:	f000 f88b 	bl	80004a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000392:	2300      	movs	r3, #0
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000396:	463b      	mov	r3, r7
 8000398:	4619      	mov	r1, r3
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <MX_TIM1_Init+0xcc>)
 800039c:	f001 fd8e 	bl	8001ebc <HAL_TIMEx_ConfigBreakDeadTime>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80003a6:	f000 f87d 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	3750      	adds	r7, #80	; 0x50
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000002c 	.word	0x2000002c
 80003b8:	40012c00 	.word	0x40012c00

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <MX_GPIO_Init+0xb0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a25      	ldr	r2, [pc, #148]	; (800046c <MX_GPIO_Init+0xb0>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <MX_GPIO_Init+0xb0>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b20      	ldr	r3, [pc, #128]	; (800046c <MX_GPIO_Init+0xb0>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a1f      	ldr	r2, [pc, #124]	; (800046c <MX_GPIO_Init+0xb0>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_GPIO_Init+0xb0>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin|trigPin_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f000 fc0c 	bl	8000c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800041a:	2302      	movs	r3, #2
 800041c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	4812      	ldr	r0, [pc, #72]	; (8000470 <MX_GPIO_Init+0xb4>)
 8000426:	f000 fa65 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : echoPin_Pin */
  GPIO_InitStruct.Pin = echoPin_Pin;
 800042a:	2310      	movs	r3, #16
 800042c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(echoPin_GPIO_Port, &GPIO_InitStruct);
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	4619      	mov	r1, r3
 800043c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000440:	f000 fa58 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin trigPin_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|trigPin_Pin;
 8000444:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8000448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	4619      	mov	r1, r3
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f000 fa48 	bl	80008f4 <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	48000800 	.word	0x48000800

08000474 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint16_t us)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]
	// set the counter value to 0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <delay_us+0x2c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24

	// wait for the counter to reach the us input in the parameter
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000486:	bf00      	nop
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <delay_us+0x2c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	429a      	cmp	r2, r3
 8000492:	d3f9      	bcc.n	8000488 <delay_us+0x14>
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	2000002c 	.word	0x2000002c

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004aa:	e7fe      	b.n	80004aa <Error_Handler+0x6>

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6613      	str	r3, [r2, #96]	; 0x60
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	6593      	str	r3, [r2, #88]	; 0x58
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_MspInit+0x44>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_TIM_Base_MspInit+0x38>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d10b      	bne.n	800051e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 800050c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000510:	6613      	str	r3, [r2, #96]	; 0x60
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40012c00 	.word	0x40012c00
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler+0x4>

08000546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler+0x4>

08000552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000580:	f000 f894 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <SystemInit+0x28>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <SystemInit+0x28>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <SystemInit+0x28>)
 800059e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005a2:	609a      	str	r2, [r3, #8]
#endif
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490e      	ldr	r1, [pc, #56]	; (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0b      	ldr	r4, [pc, #44]	; (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005de:	f7ff ffd3 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f001 fd37 	bl	8002054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fe17 	bl	8000218 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   r0, =_estack
 80005ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f8:	080020dc 	.word	0x080020dc
  ldr r2, =_sbss
 80005fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000600:	2000007c 	.word	0x2000007c

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>

08000606 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f93d 	bl	8000890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f80e 	bl	8000638 <HAL_InitTick>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e001      	b.n	800062c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000628:	f7ff ff40 	bl	80004ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800062c:	79fb      	ldrb	r3, [r7, #7]

}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_InitTick+0x68>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d022      	beq.n	8000692 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_InitTick+0x6c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_InitTick+0x68>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000658:	fbb1 f3f3 	udiv	r3, r1, r3
 800065c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f93a 	bl	80008da <HAL_SYSTICK_Config>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d10f      	bne.n	800068c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b0f      	cmp	r3, #15
 8000670:	d809      	bhi.n	8000686 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000672:	2200      	movs	r2, #0
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	f04f 30ff 	mov.w	r0, #4294967295
 800067a:	f000 f914 	bl	80008a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_InitTick+0x70>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e007      	b.n	8000696 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e004      	b.n	8000696 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e001      	b.n	8000696 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x1c>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x20>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x1c>)
 80006bc:	6013      	str	r3, [r2, #0]
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000078 	.word	0x20000078
 80006cc:	20000008 	.word	0x20000008

080006d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_GetTick+0x14>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000078 	.word	0x20000078

080006e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f0:	f7ff ffee 	bl	80006d0 <HAL_GetTick>
 80006f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000700:	d004      	beq.n	800070c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_Delay+0x40>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800070c:	bf00      	nop
 800070e:	f7ff ffdf 	bl	80006d0 <HAL_GetTick>
 8000712:	4602      	mov	r2, r0
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	429a      	cmp	r2, r3
 800071c:	d8f7      	bhi.n	800070e <HAL_Delay+0x26>
  {
  }
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0a      	blt.n	80007ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	490c      	ldr	r1, [pc, #48]	; (80007dc <__NVIC_SetPriority+0x4c>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b8:	e00a      	b.n	80007d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <__NVIC_SetPriority+0x50>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	3b04      	subs	r3, #4
 80007c8:	0112      	lsls	r2, r2, #4
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	440b      	add	r3, r1
 80007ce:	761a      	strb	r2, [r3, #24]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f1c3 0307 	rsb	r3, r3, #7
 80007fe:	2b04      	cmp	r3, #4
 8000800:	bf28      	it	cs
 8000802:	2304      	movcs	r3, #4
 8000804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3304      	adds	r3, #4
 800080a:	2b06      	cmp	r3, #6
 800080c:	d902      	bls.n	8000814 <NVIC_EncodePriority+0x30>
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3b03      	subs	r3, #3
 8000812:	e000      	b.n	8000816 <NVIC_EncodePriority+0x32>
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43da      	mvns	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	401a      	ands	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43d9      	mvns	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	4313      	orrs	r3, r2
         );
}
 800083e:	4618      	mov	r0, r3
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800085c:	d301      	bcc.n	8000862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085e:	2301      	movs	r3, #1
 8000860:	e00f      	b.n	8000882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <SysTick_Config+0x40>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086a:	210f      	movs	r1, #15
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f7ff ff8e 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <SysTick_Config+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <SysTick_Config+0x40>)
 800087c:	2207      	movs	r2, #7
 800087e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010

08000890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff47 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff5e 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ff90 	bl	80007e4 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff5f 	bl	8000790 <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffb2 	bl	800084c <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000902:	e15a      	b.n	8000bba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 814c 	beq.w	8000bb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d00b      	beq.n	800093c <HAL_GPIO_Init+0x48>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d007      	beq.n	800093c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000930:	2b11      	cmp	r3, #17
 8000932:	d003      	beq.n	800093c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b12      	cmp	r3, #18
 800093a:	d130      	bne.n	800099e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000972:	2201      	movs	r2, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	f003 0201 	and.w	r2, r3, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_Init+0xea>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d123      	bne.n	8000a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	08da      	lsrs	r2, r3, #3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3208      	adds	r2, #8
 80009e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	220f      	movs	r2, #15
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	691a      	ldr	r2, [r3, #16]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	08da      	lsrs	r2, r3, #3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3208      	adds	r2, #8
 8000a20:	6939      	ldr	r1, [r7, #16]
 8000a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2203      	movs	r2, #3
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 0203 	and.w	r2, r3, #3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 80a6 	beq.w	8000bb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a68:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <HAL_GPIO_Init+0x2e4>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6c:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <HAL_GPIO_Init+0x2e4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6613      	str	r3, [r2, #96]	; 0x60
 8000a74:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <HAL_GPIO_Init+0x2e4>)
 8000a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a80:	4a56      	ldr	r2, [pc, #344]	; (8000bdc <HAL_GPIO_Init+0x2e8>)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	089b      	lsrs	r3, r3, #2
 8000a86:	3302      	adds	r3, #2
 8000a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	220f      	movs	r2, #15
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aaa:	d01f      	beq.n	8000aec <HAL_GPIO_Init+0x1f8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x2ec>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d019      	beq.n	8000ae8 <HAL_GPIO_Init+0x1f4>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x2f0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d013      	beq.n	8000ae4 <HAL_GPIO_Init+0x1f0>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x2f4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00d      	beq.n	8000ae0 <HAL_GPIO_Init+0x1ec>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <HAL_GPIO_Init+0x2f8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x1e8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <HAL_GPIO_Init+0x2fc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_GPIO_Init+0x1e4>
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	e00a      	b.n	8000aee <HAL_GPIO_Init+0x1fa>
 8000ad8:	2306      	movs	r3, #6
 8000ada:	e008      	b.n	8000aee <HAL_GPIO_Init+0x1fa>
 8000adc:	2304      	movs	r3, #4
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1fa>
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1fa>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1fa>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1fa>
 8000aec:	2300      	movs	r3, #0
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2e8>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b0c:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b30:	4a30      	ldr	r2, [pc, #192]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b5a:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <HAL_GPIO_Init+0x300>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f47f ae9d 	bne.w	8000904 <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	48001400 	.word	0x48001400
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e001      	b.n	8000c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
 8000c34:	4613      	mov	r3, r2
 8000c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c38:	787b      	ldrb	r3, [r7, #1]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d141      	bne.n	8000cea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c66:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c72:	d131      	bne.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c74:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c7a:	4a46      	ldr	r2, [pc, #280]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c8c:	4a41      	ldr	r2, [pc, #260]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c94:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2232      	movs	r2, #50	; 0x32
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	; (8000d9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	0c9b      	lsrs	r3, r3, #18
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000caa:	e002      	b.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb2:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cbe:	d102      	bne.n	8000cc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f2      	bne.n	8000cac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd2:	d158      	bne.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e057      	b.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cde:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ce8:	e04d      	b.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf0:	d141      	bne.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfe:	d131      	bne.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2232      	movs	r2, #50	; 0x32
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d30:	0c9b      	lsrs	r3, r3, #18
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d36:	e002      	b.n	8000d3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4a:	d102      	bne.n	8000d52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f2      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5e:	d112      	bne.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e011      	b.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d74:	e007      	b.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40007000 	.word	0x40007000
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	431bde83 	.word	0x431bde83

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e308      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d075      	beq.n	8000eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbe:	4ba3      	ldr	r3, [pc, #652]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc8:	4ba0      	ldr	r3, [pc, #640]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_OscConfig+0x3e>
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d002      	beq.n	8000de4 <HAL_RCC_OscConfig+0x44>
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d10b      	bne.n	8000dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	4b99      	ldr	r3, [pc, #612]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d05b      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x108>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d157      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e2e3      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d106      	bne.n	8000e14 <HAL_RCC_OscConfig+0x74>
 8000e06:	4b91      	ldr	r3, [pc, #580]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a90      	ldr	r2, [pc, #576]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e01d      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x98>
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a8a      	ldr	r2, [pc, #552]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b88      	ldr	r3, [pc, #544]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a87      	ldr	r2, [pc, #540]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e38:	4b84      	ldr	r3, [pc, #528]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a83      	ldr	r2, [pc, #524]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b81      	ldr	r3, [pc, #516]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a80      	ldr	r2, [pc, #512]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc3a 	bl	80006d0 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc36 	bl	80006d0 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e2a8      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e72:	4b76      	ldr	r3, [pc, #472]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0xc0>
 8000e7e:	e014      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc26 	bl	80006d0 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fc22 	bl	80006d0 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	; 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e294      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0xe8>
 8000ea6:	e000      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d075      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb6:	4b65      	ldr	r3, [pc, #404]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec0:	4b62      	ldr	r3, [pc, #392]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x136>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d002      	beq.n	8000edc <HAL_RCC_OscConfig+0x13c>
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d11f      	bne.n	8000f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000edc:	4b5b      	ldr	r3, [pc, #364]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x154>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e267      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b55      	ldr	r3, [pc, #340]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	4952      	ldr	r1, [pc, #328]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f08:	4b51      	ldr	r3, [pc, #324]	; (8001050 <HAL_RCC_OscConfig+0x2b0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb93 	bl	8000638 <HAL_InitTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d043      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e253      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b49      	ldr	r3, [pc, #292]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fbce 	bl	80006d0 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fbca 	bl	80006d0 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e23c      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	061b      	lsls	r3, r3, #24
 8000f64:	4939      	ldr	r1, [pc, #228]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e01a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a36      	ldr	r2, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fbaa 	bl	80006d0 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fba6 	bl	80006d0 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e218      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1e0>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d03c      	beq.n	8001028 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fbc:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fb83 	bl	80006d0 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fce:	f7ff fb7f 	bl	80006d0 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1f1      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ef      	beq.n	8000fce <HAL_RCC_OscConfig+0x22e>
 8000fee:	e01b      	b.n	8001028 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff fb66 	bl	80006d0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fb62 	bl	80006d0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1d4      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ef      	bne.n	8001008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80ab 	beq.w	800118c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <HAL_RCC_OscConfig+0x2ac>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_RCC_OscConfig+0x2b4>
 8001046:	2301      	movs	r3, #1
 8001048:	e005      	b.n	8001056 <HAL_RCC_OscConfig+0x2b6>
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	20000004 	.word	0x20000004
 8001054:	2300      	movs	r3, #0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4baf      	ldr	r3, [pc, #700]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4aae      	ldr	r2, [pc, #696]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4bac      	ldr	r3, [pc, #688]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001076:	4ba9      	ldr	r3, [pc, #676]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001082:	4ba6      	ldr	r3, [pc, #664]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4aa5      	ldr	r2, [pc, #660]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb1f 	bl	80006d0 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fb1b 	bl	80006d0 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e18d      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	4b9c      	ldr	r3, [pc, #624]	; (800131c <HAL_RCC_OscConfig+0x57c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_RCC_OscConfig+0x32e>
 80010bc:	4b96      	ldr	r3, [pc, #600]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c2:	4a95      	ldr	r2, [pc, #596]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010cc:	e024      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d110      	bne.n	80010f8 <HAL_RCC_OscConfig+0x358>
 80010d6:	4b90      	ldr	r3, [pc, #576]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010dc:	4a8e      	ldr	r2, [pc, #568]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010e6:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ec:	4a8a      	ldr	r2, [pc, #552]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010f8:	4b87      	ldr	r3, [pc, #540]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80010fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010fe:	4a86      	ldr	r2, [pc, #536]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001108:	4b83      	ldr	r3, [pc, #524]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110e:	4a82      	ldr	r2, [pc, #520]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d016      	beq.n	800114e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff fad6 	bl	80006d0 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001128:	f7ff fad2 	bl	80006d0 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	; 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e142      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	4b76      	ldr	r3, [pc, #472]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ed      	beq.n	8001128 <HAL_RCC_OscConfig+0x388>
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114e:	f7ff fabf 	bl	80006d0 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fabb 	bl	80006d0 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e12b      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116c:	4b6a      	ldr	r3, [pc, #424]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ed      	bne.n	8001156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a64      	ldr	r2, [pc, #400]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	2b00      	cmp	r3, #0
 8001196:	d03c      	beq.n	8001212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01c      	beq.n	80011da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011a6:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fa8e 	bl	80006d0 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011b8:	f7ff fa8a 	bl	80006d0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0fc      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ef      	beq.n	80011b8 <HAL_RCC_OscConfig+0x418>
 80011d8:	e01b      	b.n	8001212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011da:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011e0:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fa71 	bl	80006d0 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fa6d 	bl	80006d0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0df      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001204:	4b44      	ldr	r3, [pc, #272]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ef      	bne.n	80011f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80d3 	beq.w	80013c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b0c      	cmp	r3, #12
 8001226:	f000 808d 	beq.w	8001344 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d15a      	bne.n	80012e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a38      	ldr	r2, [pc, #224]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800123c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fa47 	bl	80006d0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fa43 	bl	80006d0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0b5      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_RCC_OscConfig+0x580>)
 800126a:	4013      	ands	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6a11      	ldr	r1, [r2, #32]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001274:	3a01      	subs	r2, #1
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	4311      	orrs	r1, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800127e:	0212      	lsls	r2, r2, #8
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001286:	0852      	lsrs	r2, r2, #1
 8001288:	3a01      	subs	r2, #1
 800128a:	0552      	lsls	r2, r2, #21
 800128c:	4311      	orrs	r1, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001292:	0852      	lsrs	r2, r2, #1
 8001294:	3a01      	subs	r2, #1
 8001296:	0652      	lsls	r2, r2, #25
 8001298:	4311      	orrs	r1, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800129e:	06d2      	lsls	r2, r2, #27
 80012a0:	430a      	orrs	r2, r1
 80012a2:	491d      	ldr	r1, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa06 	bl	80006d0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fa02 	bl	80006d0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e074      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x528>
 80012e6:	e06c      	b.n	80013c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_RCC_OscConfig+0x578>)
 8001306:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff f9de 	bl	80006d0 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001316:	e00e      	b.n	8001336 <HAL_RCC_OscConfig+0x596>
 8001318:	40021000 	.word	0x40021000
 800131c:	40007000 	.word	0x40007000
 8001320:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f9d4 	bl	80006d0 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e046      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x62c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x584>
 8001342:	e03e      	b.n	80013c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e039      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_RCC_OscConfig+0x62c>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	429a      	cmp	r2, r3
 8001362:	d12c      	bne.n	80013be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	3b01      	subs	r3, #1
 8001370:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d123      	bne.n	80013be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d11b      	bne.n	80013be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d113      	bne.n	80013be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d109      	bne.n	80013be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	3b01      	subs	r3, #1
 80013b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e11e      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b91      	ldr	r3, [pc, #580]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d910      	bls.n	8001418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 020f 	bic.w	r2, r3, #15
 80013fe:	498c      	ldr	r1, [pc, #560]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001406:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e106      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d073      	beq.n	800150c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d129      	bne.n	8001480 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0f4      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800143c:	f000 f966 	bl	800170c <RCC_GetSysClockFreqFromPLLSource>
 8001440:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <HAL_RCC_ClockConfig+0x268>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d93f      	bls.n	80014ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800144a:	4b7a      	ldr	r3, [pc, #488]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800145e:	2b00      	cmp	r3, #0
 8001460:	d033      	beq.n	80014ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001466:	2b00      	cmp	r3, #0
 8001468:	d12f      	bne.n	80014ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001472:	4a70      	ldr	r2, [pc, #448]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e024      	b.n	80014ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d107      	bne.n	8001498 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0c6      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0be      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014a8:	f000 f8ce 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4a61      	ldr	r2, [pc, #388]	; (8001638 <HAL_RCC_ClockConfig+0x268>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d909      	bls.n	80014ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014be:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014ca:	4b5a      	ldr	r3, [pc, #360]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f023 0203 	bic.w	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4957      	ldr	r1, [pc, #348]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014dc:	f7ff f8f8 	bl	80006d0 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff f8f4 	bl	80006d0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e095      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 020c 	and.w	r2, r3, #12
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	429a      	cmp	r2, r3
 800150a:	d1eb      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800152a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800152e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001544:	4a3b      	ldr	r2, [pc, #236]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 8001546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800154a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4936      	ldr	r1, [pc, #216]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
 800155e:	e008      	b.n	8001572 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b80      	cmp	r3, #128	; 0x80
 8001564:	d105      	bne.n	8001572 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4a32      	ldr	r2, [pc, #200]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 800156c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001570:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d21d      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 020f 	bic.w	r2, r3, #15
 8001588:	4929      	ldr	r1, [pc, #164]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001590:	f7ff f89e 	bl	80006d0 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff f89a 	bl	80006d0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e03b      	b.n	8001626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_ClockConfig+0x260>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1ed      	bne.n	8001598 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4917      	ldr	r1, [pc, #92]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490f      	ldr	r1, [pc, #60]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015fa:	f000 f825 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 80015fe:	4601      	mov	r1, r0
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_ClockConfig+0x264>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_RCC_ClockConfig+0x26c>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	fa21 f303 	lsr.w	r3, r1, r3
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x270>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x274>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f80a 	bl	8000638 <HAL_InitTick>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	04c4b400 	.word	0x04c4b400
 800163c:	080020c4 	.word	0x080020c4
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d102      	bne.n	8001660 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	e047      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d102      	bne.n	8001672 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	e03e      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d136      	bne.n	80016ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3301      	adds	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a6:	68d2      	ldr	r2, [r2, #12]
 80016a8:	0a12      	lsrs	r2, r2, #8
 80016aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
      break;
 80016b4:	e00c      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c0:	68d2      	ldr	r2, [r2, #12]
 80016c2:	0a12      	lsrs	r2, r2, #8
 80016c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
      break;
 80016ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0e5b      	lsrs	r3, r3, #25
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	e001      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016f0:	693b      	ldr	r3, [r7, #16]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	00f42400 	.word	0x00f42400
 8001708:	016e3600 	.word	0x016e3600

0800170c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3301      	adds	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d10c      	bne.n	800174a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800173a:	68d2      	ldr	r2, [r2, #12]
 800173c:	0a12      	lsrs	r2, r2, #8
 800173e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
    break;
 8001748:	e00c      	b.n	8001764 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001754:	68d2      	ldr	r2, [r2, #12]
 8001756:	0a12      	lsrs	r2, r2, #8
 8001758:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
    break;
 8001762:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0e5b      	lsrs	r3, r3, #25
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	3301      	adds	r3, #1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800177e:	687b      	ldr	r3, [r7, #4]
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000
 8001790:	016e3600 	.word	0x016e3600
 8001794:	00f42400 	.word	0x00f42400

08001798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e049      	b.n	800183e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fe98 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3304      	adds	r3, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f000 f996 	bl	8001b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d001      	beq.n	8001860 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e04c      	b.n	80018fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_TIM_Base_Start+0xc0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d022      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187a:	d01d      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <HAL_TIM_Base_Start+0xc4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d018      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_TIM_Base_Start+0xc8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <HAL_TIM_Base_Start+0xcc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00e      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_TIM_Base_Start+0xd0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d009      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_TIM_Base_Start+0xd4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d004      	beq.n	80018b8 <HAL_TIM_Base_Start+0x70>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_TIM_Base_Start+0xd8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d115      	bne.n	80018e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_TIM_Base_Start+0xdc>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d015      	beq.n	80018f6 <HAL_TIM_Base_Start+0xae>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d011      	beq.n	80018f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e2:	e008      	b.n	80018f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e000      	b.n	80018f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40000400 	.word	0x40000400
 8001910:	40000800 	.word	0x40000800
 8001914:	40000c00 	.word	0x40000c00
 8001918:	40013400 	.word	0x40013400
 800191c:	40014000 	.word	0x40014000
 8001920:	40015000 	.word	0x40015000
 8001924:	00010007 	.word	0x00010007

08001928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_TIM_ConfigClockSource+0x18>
 800193c:	2302      	movs	r3, #2
 800193e:	e0d2      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x1be>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800195e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800196a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197c:	f000 80a9 	beq.w	8001ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8001980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001984:	d81a      	bhi.n	80019bc <HAL_TIM_ConfigClockSource+0x94>
 8001986:	2b30      	cmp	r3, #48	; 0x30
 8001988:	f000 809a 	beq.w	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 800198c:	2b30      	cmp	r3, #48	; 0x30
 800198e:	d809      	bhi.n	80019a4 <HAL_TIM_ConfigClockSource+0x7c>
 8001990:	2b10      	cmp	r3, #16
 8001992:	f000 8095 	beq.w	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 8001996:	2b20      	cmp	r3, #32
 8001998:	f000 8092 	beq.w	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 808f 	beq.w	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019a2:	e097      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80019a4:	2b50      	cmp	r3, #80	; 0x50
 80019a6:	d05b      	beq.n	8001a60 <HAL_TIM_ConfigClockSource+0x138>
 80019a8:	2b50      	cmp	r3, #80	; 0x50
 80019aa:	d802      	bhi.n	80019b2 <HAL_TIM_ConfigClockSource+0x8a>
 80019ac:	2b40      	cmp	r3, #64	; 0x40
 80019ae:	d077      	beq.n	8001aa0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80019b0:	e090      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80019b2:	2b60      	cmp	r3, #96	; 0x60
 80019b4:	d064      	beq.n	8001a80 <HAL_TIM_ConfigClockSource+0x158>
 80019b6:	2b70      	cmp	r3, #112	; 0x70
 80019b8:	d028      	beq.n	8001a0c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80019ba:	e08b      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80019bc:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_TIM_ConfigClockSource+0x1c8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d07e      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 80019c2:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <HAL_TIM_ConfigClockSource+0x1c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d810      	bhi.n	80019ea <HAL_TIM_ConfigClockSource+0xc2>
 80019c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019cc:	d078      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 80019ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019d2:	d803      	bhi.n	80019dc <HAL_TIM_ConfigClockSource+0xb4>
 80019d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d8:	d02f      	beq.n	8001a3a <HAL_TIM_ConfigClockSource+0x112>
      break;
 80019da:	e07b      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80019dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80019e0:	d06e      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 80019e2:	4a44      	ldr	r2, [pc, #272]	; (8001af4 <HAL_TIM_ConfigClockSource+0x1cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d06b      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80019e8:	e074      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80019ea:	4a43      	ldr	r2, [pc, #268]	; (8001af8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d067      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 80019f0:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d803      	bhi.n	80019fe <HAL_TIM_ConfigClockSource+0xd6>
 80019f6:	4a41      	ldr	r2, [pc, #260]	; (8001afc <HAL_TIM_ConfigClockSource+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d061      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80019fc:	e06a      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <HAL_TIM_ConfigClockSource+0x1d8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d05d      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
 8001a04:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <HAL_TIM_ConfigClockSource+0x1dc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d05a      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8001a0a:	e063      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f000 f998 	bl	8001d50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	609a      	str	r2, [r3, #8]
      break;
 8001a38:	e04c      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6899      	ldr	r1, [r3, #8]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f000 f981 	bl	8001d50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a5c:	609a      	str	r2, [r3, #8]
      break;
 8001a5e:	e039      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f000 f8f3 	bl	8001c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2150      	movs	r1, #80	; 0x50
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f94c 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001a7e:	e029      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f000 f912 	bl	8001cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2160      	movs	r1, #96	; 0x60
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f93c 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001a9e:	e019      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f000 f8d3 	bl	8001c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f92c 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001abe:	e009      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f000 f923 	bl	8001d16 <TIM_ITRx_SetConfig>
        break;
 8001ad0:	e000      	b.n	8001ad4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8001ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	00100030 	.word	0x00100030
 8001af4:	00100020 	.word	0x00100020
 8001af8:	00100050 	.word	0x00100050
 8001afc:	00100040 	.word	0x00100040
 8001b00:	00100060 	.word	0x00100060
 8001b04:	00100070 	.word	0x00100070

08001b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <TIM_Base_SetConfig+0x12c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d017      	beq.n	8001b50 <TIM_Base_SetConfig+0x48>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b26:	d013      	beq.n	8001b50 <TIM_Base_SetConfig+0x48>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <TIM_Base_SetConfig+0x130>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00f      	beq.n	8001b50 <TIM_Base_SetConfig+0x48>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a42      	ldr	r2, [pc, #264]	; (8001c3c <TIM_Base_SetConfig+0x134>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00b      	beq.n	8001b50 <TIM_Base_SetConfig+0x48>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a41      	ldr	r2, [pc, #260]	; (8001c40 <TIM_Base_SetConfig+0x138>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <TIM_Base_SetConfig+0x48>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <TIM_Base_SetConfig+0x13c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d003      	beq.n	8001b50 <TIM_Base_SetConfig+0x48>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <TIM_Base_SetConfig+0x140>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d108      	bne.n	8001b62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <TIM_Base_SetConfig+0x12c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d023      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d01f      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <TIM_Base_SetConfig+0x130>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01b      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <TIM_Base_SetConfig+0x134>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d017      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a2e      	ldr	r2, [pc, #184]	; (8001c40 <TIM_Base_SetConfig+0x138>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <TIM_Base_SetConfig+0x13c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00f      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <TIM_Base_SetConfig+0x144>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a2c      	ldr	r2, [pc, #176]	; (8001c50 <TIM_Base_SetConfig+0x148>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <TIM_Base_SetConfig+0x14c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0xaa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <TIM_Base_SetConfig+0x140>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <TIM_Base_SetConfig+0x12c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <TIM_Base_SetConfig+0x110>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <TIM_Base_SetConfig+0x13c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00f      	beq.n	8001c18 <TIM_Base_SetConfig+0x110>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <TIM_Base_SetConfig+0x144>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00b      	beq.n	8001c18 <TIM_Base_SetConfig+0x110>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <TIM_Base_SetConfig+0x148>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <TIM_Base_SetConfig+0x110>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <TIM_Base_SetConfig+0x14c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d003      	beq.n	8001c18 <TIM_Base_SetConfig+0x110>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <TIM_Base_SetConfig+0x140>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d103      	bne.n	8001c20 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	615a      	str	r2, [r3, #20]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00
 8001c44:	40013400 	.word	0x40013400
 8001c48:	40015000 	.word	0x40015000
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	40014400 	.word	0x40014400
 8001c54:	40014800 	.word	0x40014800

08001c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	f023 0201 	bic.w	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f023 030a 	bic.w	r3, r3, #10
 8001c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	621a      	str	r2, [r3, #32]
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b087      	sub	sp, #28
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f023 0210 	bic.w	r2, r3, #16
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	031b      	lsls	r3, r3, #12
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	621a      	str	r2, [r3, #32]
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f043 0307 	orr.w	r3, r3, #7
 8001d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	021a      	lsls	r2, r3, #8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	609a      	str	r2, [r3, #8]
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e074      	b.n	8001e92 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d108      	bne.n	8001df8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001dec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d022      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d01d      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d018      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00e      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a18      	ldr	r2, [pc, #96]	; (8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10c      	bne.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40013400 	.word	0x40013400
 8001ea8:	40015000 	.word	0x40015000
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40000c00 	.word	0x40000c00
 8001eb8:	40014000 	.word	0x40014000

08001ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e096      	b.n	8002006 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d12b      	bne.n	8001ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	051b      	lsls	r3, r3, #20
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d106      	bne.n	8001ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40012c00 	.word	0x40012c00
 8002018:	40013400 	.word	0x40013400
 800201c:	40015000 	.word	0x40015000

08002020 <getDistance>:
 */

#include "ultrasonic_sensor.h"

float getDistance()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 1);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800202a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202e:	f7fe fdfb 	bl	8000c28 <HAL_GPIO_WritePin>
	delay_us(10);
 8002032:	200a      	movs	r0, #10
 8002034:	f7fe fa1e 	bl	8000474 <delay_us>
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002042:	f7fe fdf1 	bl	8000c28 <HAL_GPIO_WritePin>
	HAL_Delay(80);
 8002046:	2050      	movs	r0, #80	; 0x50
 8002048:	f7fe fb4e 	bl	80006e8 <HAL_Delay>

	// calculate distance in cm
	//distance = pulseDuration / 59;
	//return distance;
}
 800204c:	bf00      	nop
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	bd80      	pop	{r7, pc}

08002054 <__libc_init_array>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	4e0d      	ldr	r6, [pc, #52]	; (800208c <__libc_init_array+0x38>)
 8002058:	4c0d      	ldr	r4, [pc, #52]	; (8002090 <__libc_init_array+0x3c>)
 800205a:	1ba4      	subs	r4, r4, r6
 800205c:	10a4      	asrs	r4, r4, #2
 800205e:	2500      	movs	r5, #0
 8002060:	42a5      	cmp	r5, r4
 8002062:	d109      	bne.n	8002078 <__libc_init_array+0x24>
 8002064:	4e0b      	ldr	r6, [pc, #44]	; (8002094 <__libc_init_array+0x40>)
 8002066:	4c0c      	ldr	r4, [pc, #48]	; (8002098 <__libc_init_array+0x44>)
 8002068:	f000 f820 	bl	80020ac <_init>
 800206c:	1ba4      	subs	r4, r4, r6
 800206e:	10a4      	asrs	r4, r4, #2
 8002070:	2500      	movs	r5, #0
 8002072:	42a5      	cmp	r5, r4
 8002074:	d105      	bne.n	8002082 <__libc_init_array+0x2e>
 8002076:	bd70      	pop	{r4, r5, r6, pc}
 8002078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800207c:	4798      	blx	r3
 800207e:	3501      	adds	r5, #1
 8002080:	e7ee      	b.n	8002060 <__libc_init_array+0xc>
 8002082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002086:	4798      	blx	r3
 8002088:	3501      	adds	r5, #1
 800208a:	e7f2      	b.n	8002072 <__libc_init_array+0x1e>
 800208c:	080020d4 	.word	0x080020d4
 8002090:	080020d4 	.word	0x080020d4
 8002094:	080020d4 	.word	0x080020d4
 8002098:	080020d8 	.word	0x080020d8

0800209c <memset>:
 800209c:	4402      	add	r2, r0
 800209e:	4603      	mov	r3, r0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d100      	bne.n	80020a6 <memset+0xa>
 80020a4:	4770      	bx	lr
 80020a6:	f803 1b01 	strb.w	r1, [r3], #1
 80020aa:	e7f9      	b.n	80020a0 <memset+0x4>

080020ac <_init>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr

080020b8 <_fini>:
 80020b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ba:	bf00      	nop
 80020bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020be:	bc08      	pop	{r3}
 80020c0:	469e      	mov	lr, r3
 80020c2:	4770      	bx	lr
