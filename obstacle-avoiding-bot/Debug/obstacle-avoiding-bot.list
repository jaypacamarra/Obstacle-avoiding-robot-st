
obstacle-avoiding-bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e40  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003028  08003028  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  0800303c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800303c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c42b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001963  00000000  00000000  0002c467  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024529  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d5f  00000000  00000000  00053a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee4d3  00000000  00000000  0005d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bc93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  0014bd10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003000 	.word	0x08003000

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003000 	.word	0x08003000

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb1b 	bl	8000856 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f85a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f980 	bl	8000528 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f8a2 	bl	8000370 <MX_TIM1_Init>
  MX_TIM4_Init();
 800022c:	f000 f90a 	bl	8000444 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);	// start timer1
 8000230:	4825      	ldr	r0, [pc, #148]	; (80002c8 <main+0xb0>)
 8000232:	f001 fc55 	bl	8001ae0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	// start input capture timer1
 8000236:	2100      	movs	r1, #0
 8000238:	4824      	ldr	r0, [pc, #144]	; (80002cc <main+0xb4>)
 800023a:	f001 fd23 	bl	8001c84 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  distance = getDistance();	//get distance read from HC-SR04
 800023e:	f002 fe1f 	bl	8002e80 <getDistance>
 8000242:	eef0 7a40 	vmov.f32	s15, s0
 8000246:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <main+0xb8>)
 8000248:	edc3 7a00 	vstr	s15, [r3]

	  if(distance < 10)
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <main+0xb8>)
 800024e:	edd3 7a00 	vldr	s15, [r3]
 8000252:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800025e:	d505      	bpl.n	800026c <main+0x54>
	  {
		  RGB_SET(1,0,0);
 8000260:	2200      	movs	r2, #0
 8000262:	2100      	movs	r1, #0
 8000264:	2001      	movs	r0, #1
 8000266:	f002 fde9 	bl	8002e3c <RGB_SET>
 800026a:	e028      	b.n	80002be <main+0xa6>

		  // Set motor direction to LEFT

		  // Set motor speed to 40 for 2 seconds
	  }
	  else if(distance >= 10 && distance < 50)
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <main+0xb8>)
 800026e:	edd3 7a00 	vldr	s15, [r3]
 8000272:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800027e:	db0f      	blt.n	80002a0 <main+0x88>
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <main+0xb8>)
 8000282:	edd3 7a00 	vldr	s15, [r3]
 8000286:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80002d4 <main+0xbc>
 800028a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800028e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000292:	d505      	bpl.n	80002a0 <main+0x88>
	  {
		  RGB_SET(0,0,1);
 8000294:	2201      	movs	r2, #1
 8000296:	2100      	movs	r1, #0
 8000298:	2000      	movs	r0, #0
 800029a:	f002 fdcf 	bl	8002e3c <RGB_SET>
 800029e:	e00e      	b.n	80002be <main+0xa6>

		  // Set motor speed to 60
	  }
	  else if(distance >= 50)
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0xb8>)
 80002a2:	edd3 7a00 	vldr	s15, [r3]
 80002a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80002d4 <main+0xbc>
 80002aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b2:	db04      	blt.n	80002be <main+0xa6>
	  {
		  RGB_SET(0,1,0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2101      	movs	r1, #1
 80002b8:	2000      	movs	r0, #0
 80002ba:	f002 fdbf 	bl	8002e3c <RGB_SET>

	  }

	  HAL_Delay(70);	// delay before getting next distance value
 80002be:	2046      	movs	r0, #70	; 0x46
 80002c0:	f000 fb3a 	bl	8000938 <HAL_Delay>
	  distance = getDistance();	//get distance read from HC-SR04
 80002c4:	e7bb      	b.n	800023e <main+0x26>
 80002c6:	bf00      	nop
 80002c8:	2000007c 	.word	0x2000007c
 80002cc:	2000002c 	.word	0x2000002c
 80002d0:	20000078 	.word	0x20000078
 80002d4:	42480000 	.word	0x42480000

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b094      	sub	sp, #80	; 0x50
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2238      	movs	r2, #56	; 0x38
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fe82 	bl	8002ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002fa:	2000      	movs	r0, #0
 80002fc:	f000 fde8 	bl	8000ed0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	2302      	movs	r3, #2
 8000302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	2340      	movs	r3, #64	; 0x40
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000312:	2302      	movs	r3, #2
 8000314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000316:	2304      	movs	r3, #4
 8000318:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800031a:	2355      	movs	r3, #85	; 0x55
 800031c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800031e:	2302      	movs	r3, #2
 8000320:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000322:	2302      	movs	r3, #2
 8000324:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000326:	2302      	movs	r3, #2
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fe82 	bl	8001038 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800033a:	f000 f97f 	bl	800063c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2303      	movs	r3, #3
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2104      	movs	r1, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f986 	bl	8001668 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000362:	f000 f96b 	bl	800063c <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3750      	adds	r7, #80	; 0x50
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b094      	sub	sp, #80	; 0x50
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2234      	movs	r2, #52	; 0x34
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fe2a 	bl	8002ff0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <MX_TIM1_Init+0xcc>)
 800039e:	4a28      	ldr	r2, [pc, #160]	; (8000440 <MX_TIM1_Init+0xd0>)
 80003a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80003a2:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_TIM1_Init+0xcc>)
 80003a4:	22a9      	movs	r2, #169	; 0xa9
 80003a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <MX_TIM1_Init+0xcc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80003ae:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_TIM1_Init+0xcc>)
 80003b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80003b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <MX_TIM1_Init+0xcc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <MX_TIM1_Init+0xcc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_TIM1_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c8:	481c      	ldr	r0, [pc, #112]	; (800043c <MX_TIM1_Init+0xcc>)
 80003ca:	f001 fb31 	bl	8001a30 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80003d4:	f000 f932 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003e2:	4619      	mov	r1, r3
 80003e4:	4815      	ldr	r0, [pc, #84]	; (800043c <MX_TIM1_Init+0xcc>)
 80003e6:	f001 ffab 	bl	8002340 <HAL_TIM_ConfigClockSource>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80003f0:	f000 f924 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2300      	movs	r3, #0
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003f8:	2300      	movs	r3, #0
 80003fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_TIM1_Init+0xcc>)
 8000408:	f002 fb8a 	bl	8002b20 <HAL_TIMEx_MasterConfigSynchronization>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000412:	f000 f913 	bl	800063c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_TIM1_Init+0xcc>)
 8000424:	f002 fc12 	bl	8002c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800042e:	f000 f905 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	3750      	adds	r7, #80	; 0x50
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000007c 	.word	0x2000007c
 8000440:	40012c00 	.word	0x40012c00

08000444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08c      	sub	sp, #48	; 0x30
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0320 	add.w	r3, r7, #32
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000472:	4a2c      	ldr	r2, [pc, #176]	; (8000524 <MX_TIM4_Init+0xe0>)
 8000474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000478:	22a9      	movs	r2, #169	; 0xa9
 800047a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_TIM4_Init+0xdc>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65534;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000484:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000488:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <MX_TIM4_Init+0xdc>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000496:	4822      	ldr	r0, [pc, #136]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000498:	f001 faca 	bl	8001a30 <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80004a2:	f000 f8cb 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0320 	add.w	r3, r7, #32
 80004b0:	4619      	mov	r1, r3
 80004b2:	481b      	ldr	r0, [pc, #108]	; (8000520 <MX_TIM4_Init+0xdc>)
 80004b4:	f001 ff44 	bl	8002340 <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80004be:	f000 f8bd 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80004c2:	4817      	ldr	r0, [pc, #92]	; (8000520 <MX_TIM4_Init+0xdc>)
 80004c4:	f001 fb7c 	bl	8001bc0 <HAL_TIM_IC_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80004ce:	f000 f8b5 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	480f      	ldr	r0, [pc, #60]	; (8000520 <MX_TIM4_Init+0xdc>)
 80004e2:	f002 fb1d 	bl	8002b20 <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80004ec:	f000 f8a6 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000508:	f001 fe85 	bl	8002216 <HAL_TIM_IC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000512:	f000 f893 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3730      	adds	r7, #48	; 0x30
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c
 8000524:	40000800 	.word	0x40000800

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b30      	ldr	r3, [pc, #192]	; (8000600 <MX_GPIO_Init+0xd8>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a2f      	ldr	r2, [pc, #188]	; (8000600 <MX_GPIO_Init+0xd8>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <MX_GPIO_Init+0xd8>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_GPIO_Init+0xd8>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a29      	ldr	r2, [pc, #164]	; (8000600 <MX_GPIO_Init+0xd8>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_GPIO_Init+0xd8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xd8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a23      	ldr	r2, [pc, #140]	; (8000600 <MX_GPIO_Init+0xd8>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_GPIO_Init+0xd8>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin|H_Bridge1_Control1_Pin
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 fc86 	bl	8000ea0 <HAL_GPIO_WritePin>
                          |trigPin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, H_Bridge1_Control2_Pin|H_Bridge2_Control1_Pin|H_Bridge2_Control2_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800059a:	481a      	ldr	r0, [pc, #104]	; (8000604 <MX_GPIO_Init+0xdc>)
 800059c:	f000 fc80 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80005a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005aa:	2302      	movs	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	4814      	ldr	r0, [pc, #80]	; (8000608 <MX_GPIO_Init+0xe0>)
 80005b6:	f000 faf1 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin H_Bridge1_Control1_Pin
                           trigPin_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|H_Bridge1_Control1_Pin
 80005ba:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80005be:	60fb      	str	r3, [r7, #12]
                          |trigPin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f000 fae1 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : H_Bridge1_Control2_Pin H_Bridge2_Control1_Pin H_Bridge2_Control2_Pin */
  GPIO_InitStruct.Pin = H_Bridge1_Control2_Pin|H_Bridge2_Control1_Pin|H_Bridge2_Control2_Pin;
 80005da:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_GPIO_Init+0xdc>)
 80005f4:	f000 fad2 	bl	8000b9c <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	48000400 	.word	0x48000400
 8000608:	48000800 	.word	0x48000800

0800060c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint16_t us)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	// set the counter value to 0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <delay_us+0x2c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24

	// wait for the counter to reach the us input in the parameter
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800061e:	bf00      	nop
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <delay_us+0x2c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3f9      	bcc.n	8000620 <delay_us+0x14>
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	2000007c 	.word	0x2000007c

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	e7fe      	b.n	8000642 <Error_Handler+0x6>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6613      	str	r3, [r2, #96]	; 0x60
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6593      	str	r3, [r2, #88]	; 0x58
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800067a:	f000 fccd 	bl	8001018 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <HAL_TIM_Base_MspInit+0xc4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d114      	bne.n	80006d8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	4a28      	ldr	r2, [pc, #160]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006b8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	201b      	movs	r0, #27
 80006cc:	f000 fa31 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006d0:	201b      	movs	r0, #27
 80006d2:	f000 fa48 	bl	8000b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006d6:	e036      	b.n	8000746 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_TIM_Base_MspInit+0xcc>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d131      	bne.n	8000746 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6593      	str	r3, [r2, #88]	; 0x58
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_TIM_Base_MspInit+0xc8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000724:	230a      	movs	r3, #10
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 fa33 	bl	8000b9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	201e      	movs	r0, #30
 800073c:	f000 f9f9 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000740:	201e      	movs	r0, #30
 8000742:	f000 fa10 	bl	8000b66 <HAL_NVIC_EnableIRQ>
}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40012c00 	.word	0x40012c00
 8000754:	40021000 	.word	0x40021000
 8000758:	40000800 	.word	0x40000800

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f8a8 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM1_CC_IRQHandler+0x10>)
 80007b6:	f001 fbaf 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000007c 	.word	0x2000007c

080007c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <TIM4_IRQHandler+0x10>)
 80007ca:	f001 fba5 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000002c 	.word	0x2000002c

080007d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <SystemInit+0x28>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <SystemInit+0x28>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SystemInit+0x28>)
 80007ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f2:	609a      	str	r2, [r3, #8]
#endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0b      	ldr	r4, [pc, #44]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800082e:	f7ff ffd3 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 fbb9 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000836:	f7ff fcef 	bl	8000218 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000848:	08003030 	.word	0x08003030
  ldr r2, =_sbss
 800084c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000850:	200000d4 	.word	0x200000d4

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>

08000856 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f95b 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f80e 	bl	8000888 <HAL_InitTick>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	e001      	b.n	800087c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000878:	f7ff fee4 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087c:	79fb      	ldrb	r3, [r7, #7]

}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <HAL_InitTick+0x68>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d022      	beq.n	80008e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_InitTick+0x6c>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <HAL_InitTick+0x68>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80008ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f966 	bl	8000b82 <HAL_SYSTICK_Config>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10f      	bne.n	80008dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d809      	bhi.n	80008d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c2:	2200      	movs	r2, #0
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ca:	f000 f932 	bl	8000b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_InitTick+0x70>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	e007      	b.n	80008e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	e004      	b.n	80008e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e001      	b.n	80008e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x1c>)
 800090c:	6013      	str	r3, [r2, #0]
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200000c8 	.word	0x200000c8
 800091c:	20000008 	.word	0x20000008

08000920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_GetTick+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200000c8 	.word	0x200000c8

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff ffee 	bl	8000920 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d004      	beq.n	800095c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_Delay+0x40>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	4413      	add	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095c:	bf00      	nop
 800095e:	f7ff ffdf 	bl	8000920 <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	d8f7      	bhi.n	800095e <HAL_Delay+0x26>
  {
  }
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <__NVIC_EnableIRQ+0x38>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff29 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff40 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff90 	bl	8000a70 <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5f 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff33 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa4 	bl	8000ad8 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000baa:	e15a      	b.n	8000e62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 814c 	beq.w	8000e5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d00b      	beq.n	8000be4 <HAL_GPIO_Init+0x48>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd8:	2b11      	cmp	r3, #17
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b12      	cmp	r3, #18
 8000be2:	d130      	bne.n	8000c46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0201 	and.w	r2, r3, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0xea>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80a6 	beq.w	8000e5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d14:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1c:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d28:	4a56      	ldr	r2, [pc, #344]	; (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d52:	d01f      	beq.n	8000d94 <HAL_GPIO_Init+0x1f8>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4c      	ldr	r2, [pc, #304]	; (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d019      	beq.n	8000d90 <HAL_GPIO_Init+0x1f4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d013      	beq.n	8000d8c <HAL_GPIO_Init+0x1f0>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_GPIO_Init+0x2f4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d00d      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a49      	ldr	r2, [pc, #292]	; (8000e94 <HAL_GPIO_Init+0x2f8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d101      	bne.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	e00a      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d80:	2306      	movs	r3, #6
 8000d82:	e008      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e004      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d94:	2300      	movs	r3, #0
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	f002 0203 	and.w	r2, r2, #3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da6:	4937      	ldr	r1, [pc, #220]	; (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e02:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f ae9d 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48000c00 	.word	0x48000c00
 8000e94:	48001000 	.word	0x48001000
 8000e98:	48001400 	.word	0x48001400
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d141      	bne.n	8000f62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eea:	d131      	bne.n	8000f50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef2:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efc:	4b43      	ldr	r3, [pc, #268]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f04:	4a41      	ldr	r2, [pc, #260]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f0c:	4b40      	ldr	r3, [pc, #256]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2232      	movs	r2, #50	; 0x32
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	0c9b      	lsrs	r3, r3, #18
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f22:	e002      	b.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f36:	d102      	bne.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f2      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4a:	d158      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e057      	b.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f50:	4b2e      	ldr	r3, [pc, #184]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f60:	e04d      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f68:	d141      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d131      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2232      	movs	r2, #50	; 0x32
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	0c9b      	lsrs	r3, r3, #18
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fae:	e002      	b.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc2:	d102      	bne.n	8000fca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f2      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd6:	d112      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e011      	b.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fec:	e007      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40007000 	.word	0x40007000
 8001010:	20000000 	.word	0x20000000
 8001014:	431bde83 	.word	0x431bde83

08001018 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6093      	str	r3, [r2, #8]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40007000 	.word	0x40007000

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e308      	b.n	800165c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001056:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d102      	bne.n	8001076 <HAL_RCC_OscConfig+0x3e>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d002      	beq.n	800107c <HAL_RCC_OscConfig+0x44>
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d05b      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d157      	bne.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e2e3      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x74>
 800109e:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b8b      	ldr	r3, [pc, #556]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a8a      	ldr	r2, [pc, #552]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a87      	ldr	r2, [pc, #540]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010d0:	4b84      	ldr	r3, [pc, #528]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a83      	ldr	r2, [pc, #524]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a80      	ldr	r2, [pc, #512]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc16 	bl	8000920 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fc12 	bl	8000920 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e2a8      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110a:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fc02 	bl	8000920 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fbfe 	bl	8000920 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e294      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d075      	beq.n	800123a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001158:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x136>
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d002      	beq.n	8001174 <HAL_RCC_OscConfig+0x13c>
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d11f      	bne.n	80011b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_OscConfig+0x154>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e267      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	061b      	lsls	r3, r3, #24
 800119a:	4952      	ldr	r1, [pc, #328]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x2b0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fb6f 	bl	8000888 <HAL_InitTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d043      	beq.n	8001238 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e253      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbaa 	bl	8000920 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fba6 	bl	8000920 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e23c      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	061b      	lsls	r3, r3, #24
 80011fc:	4939      	ldr	r1, [pc, #228]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
 8001202:	e01a      	b.n	800123a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a36      	ldr	r2, [pc, #216]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fb86 	bl	8000920 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fb82 	bl	8000920 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e218      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x1e0>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01c      	beq.n	8001288 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fb5f 	bl	8000920 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fb5b 	bl	8000920 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1f1      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0ef      	beq.n	8001266 <HAL_RCC_OscConfig+0x22e>
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fb42 	bl	8000920 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fb3e 	bl	8000920 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1d4      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ef      	bne.n	80012a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80ab 	beq.w	8001424 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_RCC_OscConfig+0x2b4>
 80012de:	2301      	movs	r3, #1
 80012e0:	e005      	b.n	80012ee <HAL_RCC_OscConfig+0x2b6>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	2300      	movs	r3, #0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00d      	beq.n	800130e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4baf      	ldr	r3, [pc, #700]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4aae      	ldr	r2, [pc, #696]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4bac      	ldr	r3, [pc, #688]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130e:	4ba9      	ldr	r3, [pc, #676]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800131a:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4aa5      	ldr	r2, [pc, #660]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fafb 	bl	8000920 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff faf7 	bl	8000920 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e18d      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001340:	4b9c      	ldr	r3, [pc, #624]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d108      	bne.n	8001366 <HAL_RCC_OscConfig+0x32e>
 8001354:	4b96      	ldr	r3, [pc, #600]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135a:	4a95      	ldr	r2, [pc, #596]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001364:	e024      	b.n	80013b0 <HAL_RCC_OscConfig+0x378>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d110      	bne.n	8001390 <HAL_RCC_OscConfig+0x358>
 800136e:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	4a8e      	ldr	r2, [pc, #568]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137e:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001384:	4a8a      	ldr	r2, [pc, #552]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800138e:	e00f      	b.n	80013b0 <HAL_RCC_OscConfig+0x378>
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	4a86      	ldr	r2, [pc, #536]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a0:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a6:	4a82      	ldr	r2, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d016      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fab2 	bl	8000920 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff faae 	bl	8000920 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e142      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ed      	beq.n	80013c0 <HAL_RCC_OscConfig+0x388>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa9b 	bl	8000920 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fa97 	bl	8000920 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e12b      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001404:	4b6a      	ldr	r3, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ed      	bne.n	80013ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a64      	ldr	r2, [pc, #400]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800141e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d03c      	beq.n	80014aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01c      	beq.n	8001472 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001438:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800143a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800143e:	4a5c      	ldr	r2, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fa6a 	bl	8000920 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff fa66 	bl	8000920 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0fc      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ef      	beq.n	8001450 <HAL_RCC_OscConfig+0x418>
 8001470:	e01b      	b.n	80014aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001472:	4b4f      	ldr	r3, [pc, #316]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001478:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fa4d 	bl	8000920 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800148a:	f7ff fa49 	bl	8000920 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e0df      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800149c:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800149e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ef      	bne.n	800148a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80d3 	beq.w	800165a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	f000 808d 	beq.w	80015dc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d15a      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fa23 	bl	8000920 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fa1f 	bl	8000920 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0b5      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x580>)
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6a11      	ldr	r1, [r2, #32]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800150c:	3a01      	subs	r2, #1
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	4311      	orrs	r1, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	4311      	orrs	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800151e:	0852      	lsrs	r2, r2, #1
 8001520:	3a01      	subs	r2, #1
 8001522:	0552      	lsls	r2, r2, #21
 8001524:	4311      	orrs	r1, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800152a:	0852      	lsrs	r2, r2, #1
 800152c:	3a01      	subs	r2, #1
 800152e:	0652      	lsls	r2, r2, #25
 8001530:	4311      	orrs	r1, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001536:	06d2      	lsls	r2, r2, #27
 8001538:	430a      	orrs	r2, r1
 800153a:	491d      	ldr	r1, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff f9e2 	bl	8000920 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff f9de 	bl	8000920 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e074      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x528>
 800157e:	e06c      	b.n	800165a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800159e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff f9ba 	bl	8000920 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ae:	e00e      	b.n	80015ce <HAL_RCC_OscConfig+0x596>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40007000 	.word	0x40007000
 80015b8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff f9b0 	bl	8000920 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e046      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_RCC_OscConfig+0x62c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x584>
 80015da:	e03e      	b.n	800165a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e039      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x62c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d12c      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	3b01      	subs	r3, #1
 8001608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d123      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d11b      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d113      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d109      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e11e      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b91      	ldr	r3, [pc, #580]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b8e      	ldr	r3, [pc, #568]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 020f 	bic.w	r2, r3, #15
 8001696:	498c      	ldr	r1, [pc, #560]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e106      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d073      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d129      	bne.n	8001718 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0f4      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80016d4:	f000 f966 	bl	80019a4 <RCC_GetSysClockFreqFromPLLSource>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d93f      	bls.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d033      	beq.n	8001762 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12f      	bne.n	8001762 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800170a:	4a70      	ldr	r2, [pc, #448]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e024      	b.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d107      	bne.n	8001730 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0c6      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0be      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001740:	f000 f8ce 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d909      	bls.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001756:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4957      	ldr	r1, [pc, #348]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001774:	f7ff f8d4 	bl	8000920 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff f8d0 	bl	8000920 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e095      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a42      	ldr	r2, [pc, #264]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80017dc:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4936      	ldr	r1, [pc, #216]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
 80017f6:	e008      	b.n	800180a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b80      	cmp	r3, #128	; 0x80
 80017fc:	d105      	bne.n	800180a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001808:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d21d      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 020f 	bic.w	r2, r3, #15
 8001820:	4929      	ldr	r1, [pc, #164]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001828:	f7ff f87a 	bl	8000920 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff f876 	bl	8000920 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e03b      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d1ed      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4917      	ldr	r1, [pc, #92]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	490f      	ldr	r1, [pc, #60]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001892:	f000 f825 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001896:	4601      	mov	r1, r0
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_RCC_ClockConfig+0x26c>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	fa21 f303 	lsr.w	r3, r1, r3
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x270>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe ffe6 	bl	8000888 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	04c4b400 	.word	0x04c4b400
 80018d4:	08003018 	.word	0x08003018
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	e047      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d102      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	e03e      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d136      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3301      	adds	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d10c      	bne.n	800194e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800193e:	68d2      	ldr	r2, [r2, #12]
 8001940:	0a12      	lsrs	r2, r2, #8
 8001942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
      break;
 800194c:	e00c      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001958:	68d2      	ldr	r2, [r2, #12]
 800195a:	0a12      	lsrs	r2, r2, #8
 800195c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
      break;
 8001966:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0e5b      	lsrs	r3, r3, #25
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	3301      	adds	r3, #1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e001      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	00f42400 	.word	0x00f42400
 80019a0:	016e3600 	.word	0x016e3600

080019a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3301      	adds	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d10c      	bne.n	80019e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019d2:	68d2      	ldr	r2, [r2, #12]
 80019d4:	0a12      	lsrs	r2, r2, #8
 80019d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
    break;
 80019e0:	e00c      	b.n	80019fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	0a12      	lsrs	r2, r2, #8
 80019f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    break;
 80019fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0e5b      	lsrs	r3, r3, #25
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	016e3600 	.word	0x016e3600
 8001a2c:	00f42400 	.word	0x00f42400

08001a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e049      	b.n	8001ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fe18 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f000 fdc2 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d001      	beq.n	8001af8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e04c      	b.n	8001b92 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_TIM_Base_Start+0xc0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d022      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b12:	d01d      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_TIM_Base_Start+0xc4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d018      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_TIM_Base_Start+0xc8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_TIM_Base_Start+0xcc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00e      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_TIM_Base_Start+0xd0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_TIM_Base_Start+0xd4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d004      	beq.n	8001b50 <HAL_TIM_Base_Start+0x70>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_TIM_Base_Start+0xd8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d115      	bne.n	8001b7c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_TIM_Base_Start+0xdc>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d015      	beq.n	8001b8e <HAL_TIM_Base_Start+0xae>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d011      	beq.n	8001b8e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7a:	e008      	b.n	8001b8e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e000      	b.n	8001b90 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40013400 	.word	0x40013400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40015000 	.word	0x40015000
 8001bbc:	00010007 	.word	0x00010007

08001bc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e049      	b.n	8001c66 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f841 	bl	8001c6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 fcfa 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_TIM_IC_Start_IT+0x1a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	e023      	b.n	8001ce6 <HAL_TIM_IC_Start_IT+0x62>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_IC_Start_IT+0x2a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	e01b      	b.n	8001ce6 <HAL_TIM_IC_Start_IT+0x62>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_IC_Start_IT+0x3a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	e013      	b.n	8001ce6 <HAL_TIM_IC_Start_IT+0x62>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d104      	bne.n	8001cce <HAL_TIM_IC_Start_IT+0x4a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	e00b      	b.n	8001ce6 <HAL_TIM_IC_Start_IT+0x62>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	d104      	bne.n	8001cde <HAL_TIM_IC_Start_IT+0x5a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	e003      	b.n	8001ce6 <HAL_TIM_IC_Start_IT+0x62>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d104      	bne.n	8001cf8 <HAL_TIM_IC_Start_IT+0x74>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e013      	b.n	8001d20 <HAL_TIM_IC_Start_IT+0x9c>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d104      	bne.n	8001d08 <HAL_TIM_IC_Start_IT+0x84>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e00b      	b.n	8001d20 <HAL_TIM_IC_Start_IT+0x9c>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d104      	bne.n	8001d18 <HAL_TIM_IC_Start_IT+0x94>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e003      	b.n	8001d20 <HAL_TIM_IC_Start_IT+0x9c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0dd      	b.n	8001eee <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d104      	bne.n	8001d42 <HAL_TIM_IC_Start_IT+0xbe>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d40:	e023      	b.n	8001d8a <HAL_TIM_IC_Start_IT+0x106>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_IC_Start_IT+0xce>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d50:	e01b      	b.n	8001d8a <HAL_TIM_IC_Start_IT+0x106>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_IC_Start_IT+0xde>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d60:	e013      	b.n	8001d8a <HAL_TIM_IC_Start_IT+0x106>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_IC_Start_IT+0xee>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d70:	e00b      	b.n	8001d8a <HAL_TIM_IC_Start_IT+0x106>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_IC_Start_IT+0xfe>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d80:	e003      	b.n	8001d8a <HAL_TIM_IC_Start_IT+0x106>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d104      	bne.n	8001d9a <HAL_TIM_IC_Start_IT+0x116>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	e013      	b.n	8001dc2 <HAL_TIM_IC_Start_IT+0x13e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d104      	bne.n	8001daa <HAL_TIM_IC_Start_IT+0x126>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001da8:	e00b      	b.n	8001dc2 <HAL_TIM_IC_Start_IT+0x13e>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d104      	bne.n	8001dba <HAL_TIM_IC_Start_IT+0x136>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001db8:	e003      	b.n	8001dc2 <HAL_TIM_IC_Start_IT+0x13e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d841      	bhi.n	8001e4c <HAL_TIM_IC_Start_IT+0x1c8>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <HAL_TIM_IC_Start_IT+0x14c>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	08001e4d 	.word	0x08001e4d
 8001dd8:	08001e4d 	.word	0x08001e4d
 8001ddc:	08001e4d 	.word	0x08001e4d
 8001de0:	08001e17 	.word	0x08001e17
 8001de4:	08001e4d 	.word	0x08001e4d
 8001de8:	08001e4d 	.word	0x08001e4d
 8001dec:	08001e4d 	.word	0x08001e4d
 8001df0:	08001e29 	.word	0x08001e29
 8001df4:	08001e4d 	.word	0x08001e4d
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e3b 	.word	0x08001e3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0202 	orr.w	r2, r2, #2
 8001e12:	60da      	str	r2, [r3, #12]
      break;
 8001e14:	e01b      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0204 	orr.w	r2, r2, #4
 8001e24:	60da      	str	r2, [r3, #12]
      break;
 8001e26:	e012      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	60da      	str	r2, [r3, #12]
      break;
 8001e38:	e009      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0210 	orr.w	r2, r2, #16
 8001e48:	60da      	str	r2, [r3, #12]
      break;
 8001e4a:	e000      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8001e4c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2201      	movs	r2, #1
 8001e54:	6839      	ldr	r1, [r7, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fe3c 	bl	8002ad4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_TIM_IC_Start_IT+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d01d      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_TIM_IC_Start_IT+0x278>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_TIM_IC_Start_IT+0x27c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_TIM_IC_Start_IT+0x280>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_TIM_IC_Start_IT+0x284>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_TIM_IC_Start_IT+0x288>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_TIM_IC_Start_IT+0x228>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_TIM_IC_Start_IT+0x28c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d115      	bne.n	8001ed8 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_TIM_IC_Start_IT+0x290>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d015      	beq.n	8001eea <HAL_TIM_IC_Start_IT+0x266>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d011      	beq.n	8001eea <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed6:	e008      	b.n	8001eea <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e000      	b.n	8001eec <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40000c00 	.word	0x40000c00
 8001f08:	40013400 	.word	0x40013400
 8001f0c:	40014000 	.word	0x40014000
 8001f10:	40015000 	.word	0x40015000
 8001f14:	00010007 	.word	0x00010007

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0202 	mvn.w	r2, #2
 8001f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 ffac 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fb2a 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fb31 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 ff82 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fb00 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fb07 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0208 	mvn.w	r2, #8
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 ff58 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fad6 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fadd 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b10      	cmp	r3, #16
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b10      	cmp	r3, #16
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 ff2e 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 faac 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fab3 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0201 	mvn.w	r2, #1
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa86 	bl	80025a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fe7e 	bl	8002dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d6:	d10e      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b80      	cmp	r3, #128	; 0x80
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fe71 	bl	8002dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d10e      	bne.n	8002122 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b40      	cmp	r3, #64	; 0x40
 8002110:	d107      	bne.n	8002122 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800211a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa61 	bl	80025e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d10e      	bne.n	800214e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d107      	bne.n	800214e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f06f 0220 	mvn.w	r2, #32
 8002146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fe31 	bl	8002db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215c:	d10f      	bne.n	800217e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216c:	d107      	bne.n	800217e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fe37 	bl	8002dec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800218c:	d10f      	bne.n	80021ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800219c:	d107      	bne.n	80021ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80021a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fe29 	bl	8002e00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021bc:	d10f      	bne.n	80021de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021cc:	d107      	bne.n	80021de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80021d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fe1b 	bl	8002e14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ec:	d10f      	bne.n	800220e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021fc:	d107      	bne.n	800220e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fe0d 	bl	8002e28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_TIM_IC_ConfigChannel+0x1a>
 800222c:	2302      	movs	r3, #2
 800222e:	e082      	b.n	8002336 <HAL_TIM_IC_ConfigChannel+0x120>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11b      	bne.n	8002276 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f000 fa7b 	bl	8002748 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020c 	bic.w	r2, r2, #12
 8002260:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6999      	ldr	r1, [r3, #24]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	e05a      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d11c      	bne.n	80022b6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f000 faff 	bl	800288e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800229e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	619a      	str	r2, [r3, #24]
 80022b4:	e03a      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f000 fb4c 	bl	8002968 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020c 	bic.w	r2, r2, #12
 80022de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69d9      	ldr	r1, [r3, #28]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	61da      	str	r2, [r3, #28]
 80022f2:	e01b      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f000 fb6c 	bl	80029e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002316:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69d9      	ldr	r1, [r3, #28]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x18>
 8002354:	2302      	movs	r3, #2
 8002356:	e0d2      	b.n	80024fe <HAL_TIM_ConfigClockSource+0x1be>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800237a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002394:	f000 80a9 	beq.w	80024ea <HAL_TIM_ConfigClockSource+0x1aa>
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d81a      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x94>
 800239e:	2b30      	cmp	r3, #48	; 0x30
 80023a0:	f000 809a 	beq.w	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d809      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x7c>
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	f000 8095 	beq.w	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	f000 8092 	beq.w	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 808f 	beq.w	80024d8 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023ba:	e097      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023bc:	2b50      	cmp	r3, #80	; 0x50
 80023be:	d05b      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x138>
 80023c0:	2b50      	cmp	r3, #80	; 0x50
 80023c2:	d802      	bhi.n	80023ca <HAL_TIM_ConfigClockSource+0x8a>
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d077      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80023c8:	e090      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023ca:	2b60      	cmp	r3, #96	; 0x60
 80023cc:	d064      	beq.n	8002498 <HAL_TIM_ConfigClockSource+0x158>
 80023ce:	2b70      	cmp	r3, #112	; 0x70
 80023d0:	d028      	beq.n	8002424 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80023d2:	e08b      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023d4:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_TIM_ConfigClockSource+0x1c8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d07e      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 80023da:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_TIM_ConfigClockSource+0x1c8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d810      	bhi.n	8002402 <HAL_TIM_ConfigClockSource+0xc2>
 80023e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e4:	d078      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 80023e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ea:	d803      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0xb4>
 80023ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f0:	d02f      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x112>
      break;
 80023f2:	e07b      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80023f8:	d06e      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 80023fa:	4a44      	ldr	r2, [pc, #272]	; (800250c <HAL_TIM_ConfigClockSource+0x1cc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d06b      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8002400:	e074      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002402:	4a43      	ldr	r2, [pc, #268]	; (8002510 <HAL_TIM_ConfigClockSource+0x1d0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d067      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 8002408:	4a41      	ldr	r2, [pc, #260]	; (8002510 <HAL_TIM_ConfigClockSource+0x1d0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d803      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0xd6>
 800240e:	4a41      	ldr	r2, [pc, #260]	; (8002514 <HAL_TIM_ConfigClockSource+0x1d4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d061      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8002414:	e06a      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002416:	4a40      	ldr	r2, [pc, #256]	; (8002518 <HAL_TIM_ConfigClockSource+0x1d8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d05d      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
 800241c:	4a3f      	ldr	r2, [pc, #252]	; (800251c <HAL_TIM_ConfigClockSource+0x1dc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d05a      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8002422:	e063      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f000 fb2e 	bl	8002a94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002446:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
      break;
 8002450:	e04c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f000 fb17 	bl	8002a94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002474:	609a      	str	r2, [r3, #8]
      break;
 8002476:	e039      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	f000 f9d3 	bl	8002830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2150      	movs	r1, #80	; 0x50
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fae2 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 8002496:	e029      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	461a      	mov	r2, r3
 80024a6:	f000 fa2f 	bl	8002908 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2160      	movs	r1, #96	; 0x60
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fad2 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 80024b6:	e019      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f000 f9b3 	bl	8002830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fac2 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 80024d6:	e009      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 fab9 	bl	8002a5a <TIM_ITRx_SetConfig>
        break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80024ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	00100030 	.word	0x00100030
 800250c:	00100020 	.word	0x00100020
 8002510:	00100050 	.word	0x00100050
 8002514:	00100040 	.word	0x00100040
 8002518:	00100060 	.word	0x00100060
 800251c:	00100070 	.word	0x00100070

08002520 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d831      	bhi.n	8002598 <HAL_TIM_ReadCapturedValue+0x78>
 8002534:	a201      	add	r2, pc, #4	; (adr r2, 800253c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	08002571 	.word	0x08002571
 8002540:	08002599 	.word	0x08002599
 8002544:	08002599 	.word	0x08002599
 8002548:	08002599 	.word	0x08002599
 800254c:	0800257b 	.word	0x0800257b
 8002550:	08002599 	.word	0x08002599
 8002554:	08002599 	.word	0x08002599
 8002558:	08002599 	.word	0x08002599
 800255c:	08002585 	.word	0x08002585
 8002560:	08002599 	.word	0x08002599
 8002564:	08002599 	.word	0x08002599
 8002568:	08002599 	.word	0x08002599
 800256c:	0800258f 	.word	0x0800258f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	60fb      	str	r3, [r7, #12]

      break;
 8002578:	e00f      	b.n	800259a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	60fb      	str	r3, [r7, #12]

      break;
 8002582:	e00a      	b.n	800259a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	60fb      	str	r3, [r7, #12]

      break;
 800258c:	e005      	b.n	800259a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	60fb      	str	r3, [r7, #12]

      break;
 8002596:	e000      	b.n	800259a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002598:	bf00      	nop
  }

  return tmpreg;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a46      	ldr	r2, [pc, #280]	; (8002724 <TIM_Base_SetConfig+0x12c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d017      	beq.n	8002640 <TIM_Base_SetConfig+0x48>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002616:	d013      	beq.n	8002640 <TIM_Base_SetConfig+0x48>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a43      	ldr	r2, [pc, #268]	; (8002728 <TIM_Base_SetConfig+0x130>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00f      	beq.n	8002640 <TIM_Base_SetConfig+0x48>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a42      	ldr	r2, [pc, #264]	; (800272c <TIM_Base_SetConfig+0x134>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00b      	beq.n	8002640 <TIM_Base_SetConfig+0x48>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a41      	ldr	r2, [pc, #260]	; (8002730 <TIM_Base_SetConfig+0x138>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x48>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a40      	ldr	r2, [pc, #256]	; (8002734 <TIM_Base_SetConfig+0x13c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x48>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <TIM_Base_SetConfig+0x140>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a33      	ldr	r2, [pc, #204]	; (8002724 <TIM_Base_SetConfig+0x12c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d023      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d01f      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a30      	ldr	r2, [pc, #192]	; (8002728 <TIM_Base_SetConfig+0x130>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01b      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2f      	ldr	r2, [pc, #188]	; (800272c <TIM_Base_SetConfig+0x134>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <TIM_Base_SetConfig+0x138>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <TIM_Base_SetConfig+0x13c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2d      	ldr	r2, [pc, #180]	; (800273c <TIM_Base_SetConfig+0x144>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <TIM_Base_SetConfig+0x148>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <TIM_Base_SetConfig+0x14c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0xaa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <TIM_Base_SetConfig+0x140>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <TIM_Base_SetConfig+0x12c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <TIM_Base_SetConfig+0x110>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <TIM_Base_SetConfig+0x13c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00f      	beq.n	8002708 <TIM_Base_SetConfig+0x110>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a14      	ldr	r2, [pc, #80]	; (800273c <TIM_Base_SetConfig+0x144>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00b      	beq.n	8002708 <TIM_Base_SetConfig+0x110>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <TIM_Base_SetConfig+0x148>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_Base_SetConfig+0x110>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <TIM_Base_SetConfig+0x14c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0x110>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <TIM_Base_SetConfig+0x140>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800
 8002730:	40000c00 	.word	0x40000c00
 8002734:	40013400 	.word	0x40013400
 8002738:	40015000 	.word	0x40015000
 800273c:	40014000 	.word	0x40014000
 8002740:	40014400 	.word	0x40014400
 8002744:	40014800 	.word	0x40014800

08002748 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0201 	bic.w	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <TIM_TI1_SetConfig+0xcc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01b      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d017      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <TIM_TI1_SetConfig+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <TIM_TI1_SetConfig+0xd4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00f      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <TIM_TI1_SetConfig+0xd8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00b      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a22      	ldr	r2, [pc, #136]	; (8002824 <TIM_TI1_SetConfig+0xdc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a21      	ldr	r2, [pc, #132]	; (8002828 <TIM_TI1_SetConfig+0xe0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_TI1_SetConfig+0x66>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a20      	ldr	r2, [pc, #128]	; (800282c <TIM_TI1_SetConfig+0xe4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <TIM_TI1_SetConfig+0x6a>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <TIM_TI1_SetConfig+0x6c>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e003      	b.n	80027d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f023 030a 	bic.w	r3, r3, #10
 80027ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 030a 	and.w	r3, r3, #10
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400
 800281c:	40000800 	.word	0x40000800
 8002820:	40000c00 	.word	0x40000c00
 8002824:	40013400 	.word	0x40013400
 8002828:	40014000 	.word	0x40014000
 800282c:	40015000 	.word	0x40015000

08002830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0201 	bic.w	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800285a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f023 030a 	bic.w	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 0210 	bic.w	r2, r3, #16
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	031b      	lsls	r3, r3, #12
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f023 0210 	bic.w	r2, r3, #16
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002932:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	031b      	lsls	r3, r3, #12
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002944:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	621a      	str	r2, [r3, #32]
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 0303 	bic.w	r3, r3, #3
 8002994:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80029b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	621a      	str	r2, [r3, #32]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	031b      	lsls	r3, r3, #12
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	031b      	lsls	r3, r3, #12
 8002a38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f043 0307 	orr.w	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e074      	b.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a33      	ldr	r2, [pc, #204]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a31      	ldr	r2, [pc, #196]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10c      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40013400 	.word	0x40013400
 8002c38:	40015000 	.word	0x40015000
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40014000 	.word	0x40014000

08002c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e096      	b.n	8002d96 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d106      	bne.n	8002d0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d12b      	bne.n	8002d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	051b      	lsls	r3, r3, #20
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d106      	bne.n	8002d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40015000 	.word	0x40015000

08002db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <RGB_SET>:
  * @param  green state (0 = off, 1 = on)
  * @param  blue state (0 = off, 1 = on)
  * @retval none
  */
void RGB_SET(uint8_t red_state, uint8_t green_state, uint8_t blue_state)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
 8002e46:	460b      	mov	r3, r1
 8002e48:	71bb      	strb	r3, [r7, #6]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, red_state);
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	461a      	mov	r2, r3
 8002e52:	2120      	movs	r1, #32
 8002e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e58:	f7fe f822 	bl	8000ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, green_state);
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e66:	f7fe f81b 	bl	8000ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, blue_state);
 8002e6a:	797b      	ldrb	r3, [r7, #5]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e74:	f7fe f814 	bl	8000ea0 <HAL_GPIO_WritePin>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <getDistance>:
extern float distance;
extern TIM_HandleTypeDef htim4;


float getDistance()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8e:	f7fe f807 	bl	8000ea0 <HAL_GPIO_WritePin>
	delay_us(10);
 8002e92:	200a      	movs	r0, #10
 8002e94:	f7fd fbba 	bl	800060c <delay_us>
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea2:	f7fd fffd 	bl	8000ea0 <HAL_GPIO_WritePin>

	return distance;
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <getDistance+0x34>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	ee07 3a90 	vmov	s15, r3
}
 8002eae:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000078 	.word	0x20000078

08002eb8 <HAL_TIM_IC_CaptureCallback>:

// CALLBACK FUNCTION FOR TIMER 4 CHANNEL 1
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7f1b      	ldrb	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d15c      	bne.n	8002f82 <HAL_TIM_IC_CaptureCallback+0xca>
	{
		if(is_time_captured==0)
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time_at_rising_edge = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	482f      	ldr	r0, [pc, #188]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002ed4:	f7ff fb24 	bl	8002520 <HAL_TIM_ReadCapturedValue>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002ede:	801a      	strh	r2, [r3, #0]
			is_time_captured = 1;
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 020a 	bic.w	r2, r2, #10
 8002ef4:	621a      	str	r2, [r3, #32]
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0202 	orr.w	r2, r2, #2
 8002f04:	621a      	str	r2, [r3, #32]

			is_time_captured = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8002f06:	e03c      	b.n	8002f82 <HAL_TIM_IC_CaptureCallback+0xca>
		else if(is_time_captured==1)
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d138      	bne.n	8002f82 <HAL_TIM_IC_CaptureCallback+0xca>
			Time_at_falling_edge = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002f10:	2100      	movs	r1, #0
 8002f12:	481f      	ldr	r0, [pc, #124]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f14:	f7ff fb04 	bl	8002520 <HAL_TIM_ReadCapturedValue>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002f1e:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
			if(Time_at_falling_edge>Time_at_rising_edge)
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d915      	bls.n	8002f60 <HAL_TIM_IC_CaptureCallback+0xa8>
				pulse_width = Time_at_falling_edge - Time_at_rising_edge;
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f42:	801a      	strh	r2, [r3, #0]
				distance = pulse_width / 59;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	08db      	lsrs	r3, r3, #3
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
			is_time_captured = 0;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 020a 	bic.w	r2, r2, #10
 8002f74:	621a      	str	r2, [r3, #32]
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a12      	ldr	r2, [r2, #32]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000028 	.word	0x20000028
 8002f90:	2000002c 	.word	0x2000002c
 8002f94:	200000d0 	.word	0x200000d0
 8002f98:	200000cc 	.word	0x200000cc
 8002f9c:	200000ce 	.word	0x200000ce
 8002fa0:	22b63cbf 	.word	0x22b63cbf
 8002fa4:	20000078 	.word	0x20000078

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0d      	ldr	r6, [pc, #52]	; (8002fe0 <__libc_init_array+0x38>)
 8002fac:	4c0d      	ldr	r4, [pc, #52]	; (8002fe4 <__libc_init_array+0x3c>)
 8002fae:	1ba4      	subs	r4, r4, r6
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	2500      	movs	r5, #0
 8002fb4:	42a5      	cmp	r5, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	4e0b      	ldr	r6, [pc, #44]	; (8002fe8 <__libc_init_array+0x40>)
 8002fba:	4c0c      	ldr	r4, [pc, #48]	; (8002fec <__libc_init_array+0x44>)
 8002fbc:	f000 f820 	bl	8003000 <_init>
 8002fc0:	1ba4      	subs	r4, r4, r6
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	42a5      	cmp	r5, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd0:	4798      	blx	r3
 8002fd2:	3501      	adds	r5, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fda:	4798      	blx	r3
 8002fdc:	3501      	adds	r5, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	08003028 	.word	0x08003028
 8002fe4:	08003028 	.word	0x08003028
 8002fe8:	08003028 	.word	0x08003028
 8002fec:	0800302c 	.word	0x0800302c

08002ff0 <memset>:
 8002ff0:	4402      	add	r2, r0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <memset+0xa>
 8002ff8:	4770      	bx	lr
 8002ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffe:	e7f9      	b.n	8002ff4 <memset+0x4>

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
