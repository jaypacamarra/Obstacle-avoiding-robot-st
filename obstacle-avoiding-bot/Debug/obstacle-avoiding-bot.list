
obstacle-avoiding-bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe4  08002fe4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe4  08002fe4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002ff8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002ff8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c411  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001963  00000000  00000000  0002c44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000244f9  00000000  00000000  0002f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d58  00000000  00000000  00053a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee3be  00000000  00000000  0005d769  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bb27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  0014bba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002fbc 	.word	0x08002fbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002fbc 	.word	0x08002fbc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 faf9 	bl	8000812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f85a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f980 	bl	8000528 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f8a2 	bl	8000370 <MX_TIM1_Init>
  MX_TIM4_Init();
 800022c:	f000 f90a 	bl	8000444 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);	// start timer1
 8000230:	4825      	ldr	r0, [pc, #148]	; (80002c8 <main+0xb0>)
 8000232:	f001 fc33 	bl	8001a9c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	// start input capture timer1
 8000236:	2100      	movs	r1, #0
 8000238:	4824      	ldr	r0, [pc, #144]	; (80002cc <main+0xb4>)
 800023a:	f001 fd01 	bl	8001c40 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  distance = getDistance();	//get distance read from HC-SR04
 800023e:	f002 fdfd 	bl	8002e3c <getDistance>
 8000242:	eef0 7a40 	vmov.f32	s15, s0
 8000246:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <main+0xb8>)
 8000248:	edc3 7a00 	vstr	s15, [r3]

	  if(distance < 10)
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <main+0xb8>)
 800024e:	edd3 7a00 	vldr	s15, [r3]
 8000252:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800025e:	d505      	bpl.n	800026c <main+0x54>
	  {
//		  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
//		  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
//		  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 0);
		  RGB_SET(1,0,0);
 8000260:	2200      	movs	r2, #0
 8000262:	2100      	movs	r1, #0
 8000264:	2001      	movs	r0, #1
 8000266:	f002 fdc7 	bl	8002df8 <RGB_SET>
 800026a:	e028      	b.n	80002be <main+0xa6>

		  // Set motor direction to LEFT

		  // Set motor speed to 40 for 2 seconds
	  }
	  else if(distance >= 10 && distance < 50)
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <main+0xb8>)
 800026e:	edd3 7a00 	vldr	s15, [r3]
 8000272:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800027e:	db0f      	blt.n	80002a0 <main+0x88>
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <main+0xb8>)
 8000282:	edd3 7a00 	vldr	s15, [r3]
 8000286:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80002d4 <main+0xbc>
 800028a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800028e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000292:	d505      	bpl.n	80002a0 <main+0x88>
	  {
//		  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
//		  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
//		  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
		  RGB_SET(0,0,1);
 8000294:	2201      	movs	r2, #1
 8000296:	2100      	movs	r1, #0
 8000298:	2000      	movs	r0, #0
 800029a:	f002 fdad 	bl	8002df8 <RGB_SET>
 800029e:	e00e      	b.n	80002be <main+0xa6>

		  // Set motor speed to 60
	  }
	  else if(distance >= 50)
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0xb8>)
 80002a2:	edd3 7a00 	vldr	s15, [r3]
 80002a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80002d4 <main+0xbc>
 80002aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b2:	db04      	blt.n	80002be <main+0xa6>
	  {
//		  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
//		  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
//		  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 0);
		  RGB_SET(0,1,0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2101      	movs	r1, #1
 80002b8:	2000      	movs	r0, #0
 80002ba:	f002 fd9d 	bl	8002df8 <RGB_SET>

	  }

	  HAL_Delay(70);	// delay before getting next distance value
 80002be:	2046      	movs	r0, #70	; 0x46
 80002c0:	f000 fb18 	bl	80008f4 <HAL_Delay>
	  distance = getDistance();	//get distance read from HC-SR04
 80002c4:	e7bb      	b.n	800023e <main+0x26>
 80002c6:	bf00      	nop
 80002c8:	2000007c 	.word	0x2000007c
 80002cc:	2000002c 	.word	0x2000002c
 80002d0:	20000078 	.word	0x20000078
 80002d4:	42480000 	.word	0x42480000

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b094      	sub	sp, #80	; 0x50
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2238      	movs	r2, #56	; 0x38
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fe60 	bl	8002fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002fa:	2000      	movs	r0, #0
 80002fc:	f000 fdc6 	bl	8000e8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	2302      	movs	r3, #2
 8000302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	2340      	movs	r3, #64	; 0x40
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000312:	2302      	movs	r3, #2
 8000314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000316:	2304      	movs	r3, #4
 8000318:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800031a:	2355      	movs	r3, #85	; 0x55
 800031c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800031e:	2302      	movs	r3, #2
 8000320:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000322:	2302      	movs	r3, #2
 8000324:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000326:	2302      	movs	r3, #2
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fe60 	bl	8000ff4 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800033a:	f000 f95d 	bl	80005f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2303      	movs	r3, #3
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2104      	movs	r1, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f964 	bl	8001624 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000362:	f000 f949 	bl	80005f8 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3750      	adds	r7, #80	; 0x50
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b094      	sub	sp, #80	; 0x50
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2234      	movs	r2, #52	; 0x34
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fe08 	bl	8002fac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <MX_TIM1_Init+0xcc>)
 800039e:	4a28      	ldr	r2, [pc, #160]	; (8000440 <MX_TIM1_Init+0xd0>)
 80003a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80003a2:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_TIM1_Init+0xcc>)
 80003a4:	22a9      	movs	r2, #169	; 0xa9
 80003a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <MX_TIM1_Init+0xcc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80003ae:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_TIM1_Init+0xcc>)
 80003b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80003b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <MX_TIM1_Init+0xcc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <MX_TIM1_Init+0xcc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_TIM1_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c8:	481c      	ldr	r0, [pc, #112]	; (800043c <MX_TIM1_Init+0xcc>)
 80003ca:	f001 fb0f 	bl	80019ec <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80003d4:	f000 f910 	bl	80005f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003e2:	4619      	mov	r1, r3
 80003e4:	4815      	ldr	r0, [pc, #84]	; (800043c <MX_TIM1_Init+0xcc>)
 80003e6:	f001 ff89 	bl	80022fc <HAL_TIM_ConfigClockSource>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80003f0:	f000 f902 	bl	80005f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2300      	movs	r3, #0
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003f8:	2300      	movs	r3, #0
 80003fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_TIM1_Init+0xcc>)
 8000408:	f002 fb68 	bl	8002adc <HAL_TIMEx_MasterConfigSynchronization>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000412:	f000 f8f1 	bl	80005f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_TIM1_Init+0xcc>)
 8000424:	f002 fbf0 	bl	8002c08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800042e:	f000 f8e3 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	3750      	adds	r7, #80	; 0x50
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000007c 	.word	0x2000007c
 8000440:	40012c00 	.word	0x40012c00

08000444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08c      	sub	sp, #48	; 0x30
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0320 	add.w	r3, r7, #32
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000472:	4a2c      	ldr	r2, [pc, #176]	; (8000524 <MX_TIM4_Init+0xe0>)
 8000474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000478:	22a9      	movs	r2, #169	; 0xa9
 800047a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_TIM4_Init+0xdc>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65534;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000484:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000488:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <MX_TIM4_Init+0xdc>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000496:	4822      	ldr	r0, [pc, #136]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000498:	f001 faa8 	bl	80019ec <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80004a2:	f000 f8a9 	bl	80005f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0320 	add.w	r3, r7, #32
 80004b0:	4619      	mov	r1, r3
 80004b2:	481b      	ldr	r0, [pc, #108]	; (8000520 <MX_TIM4_Init+0xdc>)
 80004b4:	f001 ff22 	bl	80022fc <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80004be:	f000 f89b 	bl	80005f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80004c2:	4817      	ldr	r0, [pc, #92]	; (8000520 <MX_TIM4_Init+0xdc>)
 80004c4:	f001 fb5a 	bl	8001b7c <HAL_TIM_IC_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80004ce:	f000 f893 	bl	80005f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	480f      	ldr	r0, [pc, #60]	; (8000520 <MX_TIM4_Init+0xdc>)
 80004e2:	f002 fafb 	bl	8002adc <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80004ec:	f000 f884 	bl	80005f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_TIM4_Init+0xdc>)
 8000508:	f001 fe63 	bl	80021d2 <HAL_TIM_IC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000512:	f000 f871 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3730      	adds	r7, #48	; 0x30
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c
 8000524:	40000800 	.word	0x40000800

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <MX_GPIO_Init+0x98>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a1f      	ldr	r2, [pc, #124]	; (80005c0 <MX_GPIO_Init+0x98>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_GPIO_Init+0x98>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_GPIO_Init+0x98>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <MX_GPIO_Init+0x98>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_GPIO_Init+0x98>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin|trigPin_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fc70 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000586:	2302      	movs	r3, #2
 8000588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	4619      	mov	r1, r3
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <MX_GPIO_Init+0x9c>)
 8000592:	f000 fae1 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin trigPin_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|trigPin_Pin;
 8000596:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fad1 	bl	8000b58 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000800 	.word	0x48000800

080005c8 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint16_t us)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
	// set the counter value to 0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <delay_us+0x2c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24

	// wait for the counter to reach the us input in the parameter
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 80005da:	bf00      	nop
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <delay_us+0x2c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3f9      	bcc.n	80005dc <delay_us+0x14>
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	2000007c 	.word	0x2000007c

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fe:	e7fe      	b.n	80005fe <Error_Handler+0x6>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x44>)
 8000608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6613      	str	r3, [r2, #96]	; 0x60
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x44>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_MspInit+0x44>)
 8000620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_MspInit+0x44>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6593      	str	r3, [r2, #88]	; 0x58
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_MspInit+0x44>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000636:	f000 fccd 	bl	8000fd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <HAL_TIM_Base_MspInit+0xc4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d114      	bne.n	8000694 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a28      	ldr	r2, [pc, #160]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 8000670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	201b      	movs	r0, #27
 8000688:	f000 fa31 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800068c:	201b      	movs	r0, #27
 800068e:	f000 fa48 	bl	8000b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000692:	e036      	b.n	8000702 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <HAL_TIM_Base_MspInit+0xcc>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d131      	bne.n	8000702 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6593      	str	r3, [r2, #88]	; 0x58
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_TIM_Base_MspInit+0xc8>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80006e0:	230a      	movs	r3, #10
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f000 fa33 	bl	8000b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	201e      	movs	r0, #30
 80006f8:	f000 f9f9 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006fc:	201e      	movs	r0, #30
 80006fe:	f000 fa10 	bl	8000b22 <HAL_NVIC_EnableIRQ>
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40012c00 	.word	0x40012c00
 8000710:	40021000 	.word	0x40021000
 8000714:	40000800 	.word	0x40000800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f8a8 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <TIM1_CC_IRQHandler+0x10>)
 8000772:	f001 fbaf 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000007c 	.word	0x2000007c

08000780 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <TIM4_IRQHandler+0x10>)
 8000786:	f001 fba5 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000002c 	.word	0x2000002c

08000794 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <SystemInit+0x28>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <SystemInit+0x28>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SystemInit+0x28>)
 80007aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ae:	609a      	str	r2, [r3, #8]
#endif
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490e      	ldr	r1, [pc, #56]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0b      	ldr	r4, [pc, #44]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ea:	f7ff ffd3 	bl	8000794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ee:	f002 fbb9 	bl	8002f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f2:	f7ff fd11 	bl	8000218 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000804:	08002fec 	.word	0x08002fec
  ldr r2, =_sbss
 8000808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800080c:	200000d4 	.word	0x200000d4

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>

08000812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f95b 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f80e 	bl	8000844 <HAL_InitTick>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e001      	b.n	8000838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000834:	f7ff fee4 	bl	8000600 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000838:	79fb      	ldrb	r3, [r7, #7]

}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_InitTick+0x68>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d022      	beq.n	800089e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_InitTick+0x6c>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_InitTick+0x68>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000864:	fbb1 f3f3 	udiv	r3, r1, r3
 8000868:	fbb2 f3f3 	udiv	r3, r2, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f966 	bl	8000b3e <HAL_SYSTICK_Config>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10f      	bne.n	8000898 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b0f      	cmp	r3, #15
 800087c:	d809      	bhi.n	8000892 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087e:	2200      	movs	r2, #0
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	f04f 30ff 	mov.w	r0, #4294967295
 8000886:	f000 f932 	bl	8000aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_InitTick+0x70>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	e007      	b.n	80008a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e004      	b.n	80008a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e001      	b.n	80008a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x1c>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x20>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_IncTick+0x1c>)
 80008c8:	6013      	str	r3, [r2, #0]
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	200000c8 	.word	0x200000c8
 80008d8:	20000008 	.word	0x20000008

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	200000c8 	.word	0x200000c8

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff ffee 	bl	80008dc <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d004      	beq.n	8000918 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_Delay+0x40>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4413      	add	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000918:	bf00      	nop
 800091a:	f7ff ffdf 	bl	80008dc <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	d8f7      	bhi.n	800091a <HAL_Delay+0x26>
  {
  }
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4907      	ldr	r1, [pc, #28]	; (80009d4 <__NVIC_EnableIRQ+0x38>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff8e 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff29 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff40 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff33 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffa4 	bl	8000a94 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b66:	e15a      	b.n	8000e1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 814c 	beq.w	8000e18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d00b      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b94:	2b11      	cmp	r3, #17
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0xea>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d123      	bne.n	8000c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	6939      	ldr	r1, [r7, #16]
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0203 	and.w	r2, r3, #3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80a6 	beq.w	8000e18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd0:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd8:	4b58      	ldr	r3, [pc, #352]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce4:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d0e:	d01f      	beq.n	8000d50 <HAL_GPIO_Init+0x1f8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <HAL_GPIO_Init+0x2ec>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d019      	beq.n	8000d4c <HAL_GPIO_Init+0x1f4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4b      	ldr	r2, [pc, #300]	; (8000e48 <HAL_GPIO_Init+0x2f0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x1f0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a4a      	ldr	r2, [pc, #296]	; (8000e4c <HAL_GPIO_Init+0x2f4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1ec>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <HAL_GPIO_Init+0x2f8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1e8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <HAL_GPIO_Init+0x2fc>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d38:	2305      	movs	r3, #5
 8000d3a:	e00a      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e008      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e006      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d44:	2303      	movs	r3, #3
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d50:	2300      	movs	r3, #0
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d62:	4937      	ldr	r1, [pc, #220]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d70:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f47f ae9d 	bne.w	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000800 	.word	0x48000800
 8000e4c:	48000c00 	.word	0x48000c00
 8000e50:	48001000 	.word	0x48001000
 8000e54:	48001400 	.word	0x48001400
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d141      	bne.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea6:	d131      	bne.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec0:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec8:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2232      	movs	r2, #50	; 0x32
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	0c9b      	lsrs	r3, r3, #18
 8000eda:	3301      	adds	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ede:	e002      	b.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	d102      	bne.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f2      	bne.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f06:	d158      	bne.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e057      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f1c:	e04d      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d141      	bne.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f32:	d131      	bne.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2232      	movs	r2, #50	; 0x32
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	0c9b      	lsrs	r3, r3, #18
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6a:	e002      	b.n	8000f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d102      	bne.n	8000f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f2      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f92:	d112      	bne.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e011      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fa8:	e007      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e308      	b.n	8001618 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d075      	beq.n	80010fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001012:	4ba3      	ldr	r3, [pc, #652]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800101c:	4ba0      	ldr	r3, [pc, #640]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x3e>
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d002      	beq.n	8001038 <HAL_RCC_OscConfig+0x44>
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b08      	cmp	r3, #8
 8001036:	d10b      	bne.n	8001050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d05b      	beq.n	80010fc <HAL_RCC_OscConfig+0x108>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d157      	bne.n	80010fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e2e3      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x74>
 800105a:	4b91      	ldr	r3, [pc, #580]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a90      	ldr	r2, [pc, #576]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e01d      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x98>
 8001072:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a8a      	ldr	r2, [pc, #552]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 800108c:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a83      	ldr	r2, [pc, #524]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a80      	ldr	r2, [pc, #512]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d013      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc16 	bl	80008dc <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fc12 	bl	80008dc <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e2a8      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0xc0>
 80010d2:	e014      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc02 	bl	80008dc <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fbfe 	bl	80008dc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e294      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ee:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0xe8>
 80010fa:	e000      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d075      	beq.n	80011f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110a:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001114:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b0c      	cmp	r3, #12
 8001122:	d102      	bne.n	800112a <HAL_RCC_OscConfig+0x136>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d002      	beq.n	8001130 <HAL_RCC_OscConfig+0x13c>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d11f      	bne.n	8001170 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001130:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_OscConfig+0x154>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e267      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	4952      	ldr	r1, [pc, #328]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800115c:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_RCC_OscConfig+0x2b0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fb6f 	bl	8000844 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d043      	beq.n	80011f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e253      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fbaa 	bl	80008dc <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fba6 	bl	80008dc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e23c      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	061b      	lsls	r3, r3, #24
 80011b8:	4939      	ldr	r1, [pc, #228]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
 80011be:	e01a      	b.n	80011f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fb86 	bl	80008dc <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fb82 	bl	80008dc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e218      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1e0>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d03c      	beq.n	800127c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01c      	beq.n	8001244 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fb5f 	bl	80008dc <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fb5b 	bl	80008dc <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1f1      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0ef      	beq.n	8001222 <HAL_RCC_OscConfig+0x22e>
 8001242:	e01b      	b.n	800127c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fb42 	bl	80008dc <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fb3e 	bl	80008dc <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1d4      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ef      	bne.n	800125c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80ab 	beq.w	80013e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2b4>
 800129a:	2301      	movs	r3, #1
 800129c:	e005      	b.n	80012aa <HAL_RCC_OscConfig+0x2b6>
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	20000004 	.word	0x20000004
 80012a8:	2300      	movs	r3, #0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4baf      	ldr	r3, [pc, #700]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4aae      	ldr	r2, [pc, #696]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4bac      	ldr	r3, [pc, #688]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ca:	4ba9      	ldr	r3, [pc, #676]	; (8001570 <HAL_RCC_OscConfig+0x57c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d118      	bne.n	8001308 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012d6:	4ba6      	ldr	r3, [pc, #664]	; (8001570 <HAL_RCC_OscConfig+0x57c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4aa5      	ldr	r2, [pc, #660]	; (8001570 <HAL_RCC_OscConfig+0x57c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fafb 	bl	80008dc <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ea:	f7ff faf7 	bl	80008dc <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e18d      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fc:	4b9c      	ldr	r3, [pc, #624]	; (8001570 <HAL_RCC_OscConfig+0x57c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_RCC_OscConfig+0x32e>
 8001310:	4b96      	ldr	r3, [pc, #600]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001316:	4a95      	ldr	r2, [pc, #596]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001320:	e024      	b.n	800136c <HAL_RCC_OscConfig+0x378>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d110      	bne.n	800134c <HAL_RCC_OscConfig+0x358>
 800132a:	4b90      	ldr	r3, [pc, #576]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001330:	4a8e      	ldr	r2, [pc, #568]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133a:	4b8c      	ldr	r3, [pc, #560]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800133c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001340:	4a8a      	ldr	r2, [pc, #552]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134a:	e00f      	b.n	800136c <HAL_RCC_OscConfig+0x378>
 800134c:	4b87      	ldr	r3, [pc, #540]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	4a86      	ldr	r2, [pc, #536]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135c:	4b83      	ldr	r3, [pc, #524]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	4a82      	ldr	r2, [pc, #520]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d016      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fab2 	bl	80008dc <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137a:	e00a      	b.n	8001392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff faae 	bl	80008dc <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e142      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0ed      	beq.n	800137c <HAL_RCC_OscConfig+0x388>
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff fa9b 	bl	80008dc <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff fa97 	bl	80008dc <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e12b      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80013c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ed      	bne.n	80013aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d4:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	4a64      	ldr	r2, [pc, #400]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80013da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03c      	beq.n	8001466 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01c      	beq.n	800142e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80013f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013fa:	4a5c      	ldr	r2, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fa6a 	bl	80008dc <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140c:	f7ff fa66 	bl	80008dc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e0fc      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ef      	beq.n	800140c <HAL_RCC_OscConfig+0x418>
 800142c:	e01b      	b.n	8001466 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800142e:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fa4d 	bl	80008dc <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001446:	f7ff fa49 	bl	80008dc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e0df      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001458:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800145a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ef      	bne.n	8001446 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80d3 	beq.w	8001616 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b0c      	cmp	r3, #12
 800147a:	f000 808d 	beq.w	8001598 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d15a      	bne.n	800153c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800148c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fa23 	bl	80008dc <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fa1f 	bl	80008dc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0b5      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_OscConfig+0x580>)
 80014be:	4013      	ands	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6a11      	ldr	r1, [r2, #32]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014c8:	3a01      	subs	r2, #1
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	4311      	orrs	r1, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014d2:	0212      	lsls	r2, r2, #8
 80014d4:	4311      	orrs	r1, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014da:	0852      	lsrs	r2, r2, #1
 80014dc:	3a01      	subs	r2, #1
 80014de:	0552      	lsls	r2, r2, #21
 80014e0:	4311      	orrs	r1, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014e6:	0852      	lsrs	r2, r2, #1
 80014e8:	3a01      	subs	r2, #1
 80014ea:	0652      	lsls	r2, r2, #25
 80014ec:	4311      	orrs	r1, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014f2:	06d2      	lsls	r2, r2, #27
 80014f4:	430a      	orrs	r2, r1
 80014f6:	491d      	ldr	r1, [pc, #116]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x578>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1a      	ldr	r2, [pc, #104]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001506:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800150e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001512:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff f9e2 	bl	80008dc <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff f9de 	bl	80008dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e074      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x528>
 800153a:	e06c      	b.n	8001616 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001546:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_OscConfig+0x578>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_RCC_OscConfig+0x578>)
 800155a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff f9ba 	bl	80008dc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156a:	e00e      	b.n	800158a <HAL_RCC_OscConfig+0x596>
 800156c:	40021000 	.word	0x40021000
 8001570:	40007000 	.word	0x40007000
 8001574:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff f9b0 	bl	80008dc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e046      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x62c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x584>
 8001596:	e03e      	b.n	8001616 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e039      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_RCC_OscConfig+0x62c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d12c      	bne.n	8001612 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	3b01      	subs	r3, #1
 80015c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d123      	bne.n	8001612 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d11b      	bne.n	8001612 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d113      	bne.n	8001612 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	3b01      	subs	r3, #1
 800160c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e11e      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b8e      	ldr	r3, [pc, #568]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 020f 	bic.w	r2, r3, #15
 8001652:	498c      	ldr	r1, [pc, #560]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e106      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d073      	beq.n	8001760 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d129      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001680:	4b81      	ldr	r3, [pc, #516]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0f4      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001690:	f000 f966 	bl	8001960 <RCC_GetSysClockFreqFromPLLSource>
 8001694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_ClockConfig+0x268>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d93f      	bls.n	800171e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800169e:	4b7a      	ldr	r3, [pc, #488]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d033      	beq.n	800171e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d12f      	bne.n	800171e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c6:	4a70      	ldr	r2, [pc, #448]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e024      	b.n	800171e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d107      	bne.n	80016ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016dc:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0c6      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0be      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016fc:	f000 f8ce 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4a61      	ldr	r2, [pc, #388]	; (800188c <HAL_RCC_ClockConfig+0x268>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d909      	bls.n	800171e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001712:	4a5d      	ldr	r2, [pc, #372]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4957      	ldr	r1, [pc, #348]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001730:	f7ff f8d4 	bl	80008dc <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f8d0 	bl	80008dc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e095      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b4e      	ldr	r3, [pc, #312]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800177e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001782:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001798:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800179a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800179e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4936      	ldr	r1, [pc, #216]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b80      	cmp	r3, #128	; 0x80
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 80017c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d21d      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 020f 	bic.w	r2, r3, #15
 80017dc:	4929      	ldr	r1, [pc, #164]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e4:	f7ff f87a 	bl	80008dc <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff f876 	bl	80008dc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e03b      	b.n	800187a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x260>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ed      	bne.n	80017ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490f      	ldr	r1, [pc, #60]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184e:	f000 f825 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001852:	4601      	mov	r1, r0
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_ClockConfig+0x264>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_RCC_ClockConfig+0x26c>)
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa21 f303 	lsr.w	r3, r1, r3
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x270>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ffe6 	bl	8000844 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000
 8001888:	40021000 	.word	0x40021000
 800188c:	04c4b400 	.word	0x04c4b400
 8001890:	08002fd4 	.word	0x08002fd4
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e047      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	e03e      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d136      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018fa:	68d2      	ldr	r2, [r2, #12]
 80018fc:	0a12      	lsrs	r2, r2, #8
 80018fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
      break;
 8001908:	e00c      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001914:	68d2      	ldr	r2, [r2, #12]
 8001916:	0a12      	lsrs	r2, r2, #8
 8001918:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
      break;
 8001922:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0e5b      	lsrs	r3, r3, #25
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e001      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001944:	693b      	ldr	r3, [r7, #16]
}
 8001946:	4618      	mov	r0, r3
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	00f42400 	.word	0x00f42400
 800195c:	016e3600 	.word	0x016e3600

08001960 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d10c      	bne.n	800199e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198e:	68d2      	ldr	r2, [r2, #12]
 8001990:	0a12      	lsrs	r2, r2, #8
 8001992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
    break;
 800199c:	e00c      	b.n	80019b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    break;
 80019b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0e5b      	lsrs	r3, r3, #25
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	016e3600 	.word	0x016e3600
 80019e8:	00f42400 	.word	0x00f42400

080019ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e049      	b.n	8001a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fe18 	bl	8000648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f000 fdc2 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d001      	beq.n	8001ab4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04c      	b.n	8001b4e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_TIM_Base_Start+0xc0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d022      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ace:	d01d      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_TIM_Base_Start+0xc4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d018      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_TIM_Base_Start+0xc8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <HAL_TIM_Base_Start+0xcc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00e      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_TIM_Base_Start+0xd0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_TIM_Base_Start+0xd4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_TIM_Base_Start+0x70>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_TIM_Base_Start+0xd8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d115      	bne.n	8001b38 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_TIM_Base_Start+0xdc>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d015      	beq.n	8001b4a <HAL_TIM_Base_Start+0xae>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d011      	beq.n	8001b4a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b36:	e008      	b.n	8001b4a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e000      	b.n	8001b4c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800
 8001b68:	40000c00 	.word	0x40000c00
 8001b6c:	40013400 	.word	0x40013400
 8001b70:	40014000 	.word	0x40014000
 8001b74:	40015000 	.word	0x40015000
 8001b78:	00010007 	.word	0x00010007

08001b7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e049      	b.n	8001c22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f841 	bl	8001c2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f000 fcfa 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_IC_Start_IT+0x1a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	e023      	b.n	8001ca2 <HAL_TIM_IC_Start_IT+0x62>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d104      	bne.n	8001c6a <HAL_TIM_IC_Start_IT+0x2a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	e01b      	b.n	8001ca2 <HAL_TIM_IC_Start_IT+0x62>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d104      	bne.n	8001c7a <HAL_TIM_IC_Start_IT+0x3a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	e013      	b.n	8001ca2 <HAL_TIM_IC_Start_IT+0x62>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d104      	bne.n	8001c8a <HAL_TIM_IC_Start_IT+0x4a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e00b      	b.n	8001ca2 <HAL_TIM_IC_Start_IT+0x62>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d104      	bne.n	8001c9a <HAL_TIM_IC_Start_IT+0x5a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	e003      	b.n	8001ca2 <HAL_TIM_IC_Start_IT+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <HAL_TIM_IC_Start_IT+0x74>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e013      	b.n	8001cdc <HAL_TIM_IC_Start_IT+0x9c>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d104      	bne.n	8001cc4 <HAL_TIM_IC_Start_IT+0x84>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e00b      	b.n	8001cdc <HAL_TIM_IC_Start_IT+0x9c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d104      	bne.n	8001cd4 <HAL_TIM_IC_Start_IT+0x94>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	e003      	b.n	8001cdc <HAL_TIM_IC_Start_IT+0x9c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d102      	bne.n	8001cea <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0dd      	b.n	8001eaa <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d104      	bne.n	8001cfe <HAL_TIM_IC_Start_IT+0xbe>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	e023      	b.n	8001d46 <HAL_TIM_IC_Start_IT+0x106>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d104      	bne.n	8001d0e <HAL_TIM_IC_Start_IT+0xce>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d0c:	e01b      	b.n	8001d46 <HAL_TIM_IC_Start_IT+0x106>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d104      	bne.n	8001d1e <HAL_TIM_IC_Start_IT+0xde>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d1c:	e013      	b.n	8001d46 <HAL_TIM_IC_Start_IT+0x106>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d104      	bne.n	8001d2e <HAL_TIM_IC_Start_IT+0xee>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d2c:	e00b      	b.n	8001d46 <HAL_TIM_IC_Start_IT+0x106>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d104      	bne.n	8001d3e <HAL_TIM_IC_Start_IT+0xfe>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d3c:	e003      	b.n	8001d46 <HAL_TIM_IC_Start_IT+0x106>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_IC_Start_IT+0x116>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d54:	e013      	b.n	8001d7e <HAL_TIM_IC_Start_IT+0x13e>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIM_IC_Start_IT+0x126>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d64:	e00b      	b.n	8001d7e <HAL_TIM_IC_Start_IT+0x13e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d104      	bne.n	8001d76 <HAL_TIM_IC_Start_IT+0x136>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d74:	e003      	b.n	8001d7e <HAL_TIM_IC_Start_IT+0x13e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d841      	bhi.n	8001e08 <HAL_TIM_IC_Start_IT+0x1c8>
 8001d84:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <HAL_TIM_IC_Start_IT+0x14c>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001dc1 	.word	0x08001dc1
 8001d90:	08001e09 	.word	0x08001e09
 8001d94:	08001e09 	.word	0x08001e09
 8001d98:	08001e09 	.word	0x08001e09
 8001d9c:	08001dd3 	.word	0x08001dd3
 8001da0:	08001e09 	.word	0x08001e09
 8001da4:	08001e09 	.word	0x08001e09
 8001da8:	08001e09 	.word	0x08001e09
 8001dac:	08001de5 	.word	0x08001de5
 8001db0:	08001e09 	.word	0x08001e09
 8001db4:	08001e09 	.word	0x08001e09
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001df7 	.word	0x08001df7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0202 	orr.w	r2, r2, #2
 8001dce:	60da      	str	r2, [r3, #12]
      break;
 8001dd0:	e01b      	b.n	8001e0a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0204 	orr.w	r2, r2, #4
 8001de0:	60da      	str	r2, [r3, #12]
      break;
 8001de2:	e012      	b.n	8001e0a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	60da      	str	r2, [r3, #12]
      break;
 8001df4:	e009      	b.n	8001e0a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0210 	orr.w	r2, r2, #16
 8001e04:	60da      	str	r2, [r3, #12]
      break;
 8001e06:	e000      	b.n	8001e0a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8001e08:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	6839      	ldr	r1, [r7, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fe3c 	bl	8002a90 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <HAL_TIM_IC_Start_IT+0x274>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d022      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d01d      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <HAL_TIM_IC_Start_IT+0x278>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d018      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <HAL_TIM_IC_Start_IT+0x27c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_TIM_IC_Start_IT+0x280>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_TIM_IC_Start_IT+0x284>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_TIM_IC_Start_IT+0x288>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_IC_Start_IT+0x228>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_TIM_IC_Start_IT+0x28c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d115      	bne.n	8001e94 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_TIM_IC_Start_IT+0x290>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d015      	beq.n	8001ea6 <HAL_TIM_IC_Start_IT+0x266>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d011      	beq.n	8001ea6 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e008      	b.n	8001ea6 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e000      	b.n	8001ea8 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40012c00 	.word	0x40012c00
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40013400 	.word	0x40013400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40015000 	.word	0x40015000
 8001ed0:	00010007 	.word	0x00010007

08001ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 ffac 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fb2a 	bl	8002578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fb31 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0204 	mvn.w	r2, #4
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 ff82 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fb00 	bl	8002578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fb07 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 ff58 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fad6 	bl	8002578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fadd 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 ff2e 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 faac 	bl	8002578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fab3 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa86 	bl	8002564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fe7e 	bl	8002d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002092:	d10e      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d107      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fe71 	bl	8002d94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d10e      	bne.n	80020de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d107      	bne.n	80020de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fa61 	bl	80025a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d10e      	bne.n	800210a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d107      	bne.n	800210a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f06f 0220 	mvn.w	r2, #32
 8002102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fe31 	bl	8002d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002118:	d10f      	bne.n	800213a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002128:	d107      	bne.n	800213a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fe37 	bl	8002da8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002148:	d10f      	bne.n	800216a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002158:	d107      	bne.n	800216a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fe29 	bl	8002dbc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002178:	d10f      	bne.n	800219a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002188:	d107      	bne.n	800219a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fe1b 	bl	8002dd0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021a8:	d10f      	bne.n	80021ca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021b8:	d107      	bne.n	80021ca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80021c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fe0d 	bl	8002de4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_IC_ConfigChannel+0x1a>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e082      	b.n	80022f2 <HAL_TIM_IC_ConfigChannel+0x120>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11b      	bne.n	8002232 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f000 fa7b 	bl	8002704 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 020c 	bic.w	r2, r2, #12
 800221c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6999      	ldr	r1, [r3, #24]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	e05a      	b.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11c      	bne.n	8002272 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f000 faff 	bl	800284a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800225a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6999      	ldr	r1, [r3, #24]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	021a      	lsls	r2, r3, #8
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	e03a      	b.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d11b      	bne.n	80022b0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f000 fb4c 	bl	8002924 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020c 	bic.w	r2, r2, #12
 800229a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69d9      	ldr	r1, [r3, #28]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	61da      	str	r2, [r3, #28]
 80022ae:	e01b      	b.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f000 fb6c 	bl	800299c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69d9      	ldr	r1, [r3, #28]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	021a      	lsls	r2, r3, #8
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x18>
 8002310:	2302      	movs	r3, #2
 8002312:	e0d2      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x1be>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002350:	f000 80a9 	beq.w	80024a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002358:	d81a      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x94>
 800235a:	2b30      	cmp	r3, #48	; 0x30
 800235c:	f000 809a 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x198>
 8002360:	2b30      	cmp	r3, #48	; 0x30
 8002362:	d809      	bhi.n	8002378 <HAL_TIM_ConfigClockSource+0x7c>
 8002364:	2b10      	cmp	r3, #16
 8002366:	f000 8095 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x198>
 800236a:	2b20      	cmp	r3, #32
 800236c:	f000 8092 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x198>
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808f 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002376:	e097      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002378:	2b50      	cmp	r3, #80	; 0x50
 800237a:	d05b      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x138>
 800237c:	2b50      	cmp	r3, #80	; 0x50
 800237e:	d802      	bhi.n	8002386 <HAL_TIM_ConfigClockSource+0x8a>
 8002380:	2b40      	cmp	r3, #64	; 0x40
 8002382:	d077      	beq.n	8002474 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002384:	e090      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002386:	2b60      	cmp	r3, #96	; 0x60
 8002388:	d064      	beq.n	8002454 <HAL_TIM_ConfigClockSource+0x158>
 800238a:	2b70      	cmp	r3, #112	; 0x70
 800238c:	d028      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800238e:	e08b      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_TIM_ConfigClockSource+0x1c8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d07e      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
 8002396:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_TIM_ConfigClockSource+0x1c8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d810      	bhi.n	80023be <HAL_TIM_ConfigClockSource+0xc2>
 800239c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a0:	d078      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
 80023a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a6:	d803      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0xb4>
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d02f      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x112>
      break;
 80023ae:	e07b      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80023b4:	d06e      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
 80023b6:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <HAL_TIM_ConfigClockSource+0x1cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d06b      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80023bc:	e074      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023be:	4a43      	ldr	r2, [pc, #268]	; (80024cc <HAL_TIM_ConfigClockSource+0x1d0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d067      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
 80023c4:	4a41      	ldr	r2, [pc, #260]	; (80024cc <HAL_TIM_ConfigClockSource+0x1d0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d803      	bhi.n	80023d2 <HAL_TIM_ConfigClockSource+0xd6>
 80023ca:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <HAL_TIM_ConfigClockSource+0x1d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d061      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80023d0:	e06a      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_TIM_ConfigClockSource+0x1d8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d05d      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_TIM_ConfigClockSource+0x1dc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d05a      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80023de:	e063      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f000 fb2e 	bl	8002a50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002402:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e04c      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f000 fb17 	bl	8002a50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002430:	609a      	str	r2, [r3, #8]
      break;
 8002432:	e039      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	461a      	mov	r2, r3
 8002442:	f000 f9d3 	bl	80027ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2150      	movs	r1, #80	; 0x50
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fae2 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002452:	e029      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	461a      	mov	r2, r3
 8002462:	f000 fa2f 	bl	80028c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2160      	movs	r1, #96	; 0x60
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fad2 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002472:	e019      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	461a      	mov	r2, r3
 8002482:	f000 f9b3 	bl	80027ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fac2 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002492:	e009      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 fab9 	bl	8002a16 <TIM_ITRx_SetConfig>
        break;
 80024a4:	e000      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80024a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	00100030 	.word	0x00100030
 80024c8:	00100020 	.word	0x00100020
 80024cc:	00100050 	.word	0x00100050
 80024d0:	00100040 	.word	0x00100040
 80024d4:	00100060 	.word	0x00100060
 80024d8:	00100070 	.word	0x00100070

080024dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d831      	bhi.n	8002554 <HAL_TIM_ReadCapturedValue+0x78>
 80024f0:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	0800252d 	.word	0x0800252d
 80024fc:	08002555 	.word	0x08002555
 8002500:	08002555 	.word	0x08002555
 8002504:	08002555 	.word	0x08002555
 8002508:	08002537 	.word	0x08002537
 800250c:	08002555 	.word	0x08002555
 8002510:	08002555 	.word	0x08002555
 8002514:	08002555 	.word	0x08002555
 8002518:	08002541 	.word	0x08002541
 800251c:	08002555 	.word	0x08002555
 8002520:	08002555 	.word	0x08002555
 8002524:	08002555 	.word	0x08002555
 8002528:	0800254b 	.word	0x0800254b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	60fb      	str	r3, [r7, #12]

      break;
 8002534:	e00f      	b.n	8002556 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	60fb      	str	r3, [r7, #12]

      break;
 800253e:	e00a      	b.n	8002556 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	60fb      	str	r3, [r7, #12]

      break;
 8002548:	e005      	b.n	8002556 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	60fb      	str	r3, [r7, #12]

      break;
 8002552:	e000      	b.n	8002556 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002554:	bf00      	nop
  }

  return tmpreg;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <TIM_Base_SetConfig+0x12c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d017      	beq.n	80025fc <TIM_Base_SetConfig+0x48>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d2:	d013      	beq.n	80025fc <TIM_Base_SetConfig+0x48>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <TIM_Base_SetConfig+0x130>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0x48>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a42      	ldr	r2, [pc, #264]	; (80026e8 <TIM_Base_SetConfig+0x134>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x48>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <TIM_Base_SetConfig+0x138>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x48>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <TIM_Base_SetConfig+0x13c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x48>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <TIM_Base_SetConfig+0x140>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a33      	ldr	r2, [pc, #204]	; (80026e0 <TIM_Base_SetConfig+0x12c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d023      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d01f      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a30      	ldr	r2, [pc, #192]	; (80026e4 <TIM_Base_SetConfig+0x130>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01b      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <TIM_Base_SetConfig+0x134>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d017      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <TIM_Base_SetConfig+0x138>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <TIM_Base_SetConfig+0x13c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00f      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <TIM_Base_SetConfig+0x144>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00b      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <TIM_Base_SetConfig+0x148>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <TIM_Base_SetConfig+0x14c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d003      	beq.n	800265e <TIM_Base_SetConfig+0xaa>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <TIM_Base_SetConfig+0x140>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d108      	bne.n	8002670 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <TIM_Base_SetConfig+0x12c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <TIM_Base_SetConfig+0x110>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <TIM_Base_SetConfig+0x13c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00f      	beq.n	80026c4 <TIM_Base_SetConfig+0x110>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <TIM_Base_SetConfig+0x144>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00b      	beq.n	80026c4 <TIM_Base_SetConfig+0x110>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <TIM_Base_SetConfig+0x148>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <TIM_Base_SetConfig+0x110>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <TIM_Base_SetConfig+0x14c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <TIM_Base_SetConfig+0x110>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <TIM_Base_SetConfig+0x140>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d103      	bne.n	80026cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	615a      	str	r2, [r3, #20]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800
 80026ec:	40000c00 	.word	0x40000c00
 80026f0:	40013400 	.word	0x40013400
 80026f4:	40015000 	.word	0x40015000
 80026f8:	40014000 	.word	0x40014000
 80026fc:	40014400 	.word	0x40014400
 8002700:	40014800 	.word	0x40014800

08002704 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <TIM_TI1_SetConfig+0xcc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01b      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d017      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <TIM_TI1_SetConfig+0xd0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <TIM_TI1_SetConfig+0xd4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00f      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <TIM_TI1_SetConfig+0xd8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <TIM_TI1_SetConfig+0xdc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <TIM_TI1_SetConfig+0xe0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_TI1_SetConfig+0x66>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <TIM_TI1_SetConfig+0xe4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <TIM_TI1_SetConfig+0x6a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <TIM_TI1_SetConfig+0x6c>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e003      	b.n	800278e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	b2db      	uxtb	r3, r3
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f023 030a 	bic.w	r3, r3, #10
 80027a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 030a 	and.w	r3, r3, #10
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40015000 	.word	0x40015000

080027ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f023 0201 	bic.w	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f023 030a 	bic.w	r3, r3, #10
 8002828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 0210 	bic.w	r2, r3, #16
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	b29b      	uxth	r3, r3
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	621a      	str	r2, [r3, #32]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 0210 	bic.w	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 0303 	bic.w	r3, r3, #3
 8002950:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002960:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b2db      	uxtb	r3, r3
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002974:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	031b      	lsls	r3, r3, #12
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80029ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	031b      	lsls	r3, r3, #12
 80029f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f043 0307 	orr.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1a      	ldr	r2, [r3, #32]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e074      	b.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a34      	ldr	r2, [pc, #208]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d01d      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d018      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10c      	bne.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40013400 	.word	0x40013400
 8002bf4:	40015000 	.word	0x40015000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40014000 	.word	0x40014000

08002c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e096      	b.n	8002d52 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2d      	ldr	r2, [pc, #180]	; (8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d106      	bne.n	8002cca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d12b      	bne.n	8002d40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d106      	bne.n	8002d40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40013400 	.word	0x40013400
 8002d68:	40015000 	.word	0x40015000

08002d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <RGB_SET>:
 */

#include "RGB.h"

void RGB_SET(uint8_t red_state,uint8_t green_state,uint8_t blue_state)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
 8002e02:	460b      	mov	r3, r1
 8002e04:	71bb      	strb	r3, [r7, #6]
 8002e06:	4613      	mov	r3, r2
 8002e08:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, red_state);
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2120      	movs	r1, #32
 8002e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e14:	f7fe f822 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, green_state);
 8002e18:	79bb      	ldrb	r3, [r7, #6]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2140      	movs	r1, #64	; 0x40
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f7fe f81b 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, blue_state);
 8002e26:	797b      	ldrb	r3, [r7, #5]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e30:	f7fe f814 	bl	8000e5c <HAL_GPIO_WritePin>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <getDistance>:
extern float distance;
extern TIM_HandleTypeDef htim4;


float getDistance()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 1);
 8002e40:	2201      	movs	r2, #1
 8002e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4a:	f7fe f807 	bl	8000e5c <HAL_GPIO_WritePin>
	delay_us(10);
 8002e4e:	200a      	movs	r0, #10
 8002e50:	f7fd fbba 	bl	80005c8 <delay_us>
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5e:	f7fd fffd 	bl	8000e5c <HAL_GPIO_WritePin>

	return distance;
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <getDistance+0x34>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	ee07 3a90 	vmov	s15, r3
}
 8002e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000078 	.word	0x20000078

08002e74 <HAL_TIM_IC_CaptureCallback>:

// CALLBACK FUNCTION FOR TIMER 4 CHANNEL 1
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7f1b      	ldrb	r3, [r3, #28]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d15c      	bne.n	8002f3e <HAL_TIM_IC_CaptureCallback+0xca>
	{
		if(is_time_captured==0)
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time_at_rising_edge = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	482f      	ldr	r0, [pc, #188]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002e90:	f7ff fb24 	bl	80024dc <HAL_TIM_ReadCapturedValue>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002e9a:	801a      	strh	r2, [r3, #0]
			is_time_captured = 1;
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020a 	bic.w	r2, r2, #10
 8002eb0:	621a      	str	r2, [r3, #32]
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0202 	orr.w	r2, r2, #2
 8002ec0:	621a      	str	r2, [r3, #32]

			is_time_captured = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8002ec2:	e03c      	b.n	8002f3e <HAL_TIM_IC_CaptureCallback+0xca>
		else if(is_time_captured==1)
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d138      	bne.n	8002f3e <HAL_TIM_IC_CaptureCallback+0xca>
			Time_at_falling_edge = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	481f      	ldr	r0, [pc, #124]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002ed0:	f7ff fb04 	bl	80024dc <HAL_TIM_ReadCapturedValue>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002eda:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
			if(Time_at_falling_edge>Time_at_rising_edge)
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d915      	bls.n	8002f1c <HAL_TIM_IC_CaptureCallback+0xa8>
				pulse_width = Time_at_falling_edge - Time_at_rising_edge;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002efe:	801a      	strh	r2, [r3, #0]
				distance = pulse_width / 59;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002f18:	edc3 7a00 	vstr	s15, [r3]
			is_time_captured = 0;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 020a 	bic.w	r2, r2, #10
 8002f30:	621a      	str	r2, [r3, #32]
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a12      	ldr	r2, [r2, #32]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000028 	.word	0x20000028
 8002f4c:	2000002c 	.word	0x2000002c
 8002f50:	200000d0 	.word	0x200000d0
 8002f54:	200000cc 	.word	0x200000cc
 8002f58:	200000ce 	.word	0x200000ce
 8002f5c:	22b63cbf 	.word	0x22b63cbf
 8002f60:	20000078 	.word	0x20000078

08002f64 <__libc_init_array>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	4e0d      	ldr	r6, [pc, #52]	; (8002f9c <__libc_init_array+0x38>)
 8002f68:	4c0d      	ldr	r4, [pc, #52]	; (8002fa0 <__libc_init_array+0x3c>)
 8002f6a:	1ba4      	subs	r4, r4, r6
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	2500      	movs	r5, #0
 8002f70:	42a5      	cmp	r5, r4
 8002f72:	d109      	bne.n	8002f88 <__libc_init_array+0x24>
 8002f74:	4e0b      	ldr	r6, [pc, #44]	; (8002fa4 <__libc_init_array+0x40>)
 8002f76:	4c0c      	ldr	r4, [pc, #48]	; (8002fa8 <__libc_init_array+0x44>)
 8002f78:	f000 f820 	bl	8002fbc <_init>
 8002f7c:	1ba4      	subs	r4, r4, r6
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	2500      	movs	r5, #0
 8002f82:	42a5      	cmp	r5, r4
 8002f84:	d105      	bne.n	8002f92 <__libc_init_array+0x2e>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f8c:	4798      	blx	r3
 8002f8e:	3501      	adds	r5, #1
 8002f90:	e7ee      	b.n	8002f70 <__libc_init_array+0xc>
 8002f92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f96:	4798      	blx	r3
 8002f98:	3501      	adds	r5, #1
 8002f9a:	e7f2      	b.n	8002f82 <__libc_init_array+0x1e>
 8002f9c:	08002fe4 	.word	0x08002fe4
 8002fa0:	08002fe4 	.word	0x08002fe4
 8002fa4:	08002fe4 	.word	0x08002fe4
 8002fa8:	08002fe8 	.word	0x08002fe8

08002fac <memset>:
 8002fac:	4402      	add	r2, r0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <_init>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr

08002fc8 <_fini>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr
