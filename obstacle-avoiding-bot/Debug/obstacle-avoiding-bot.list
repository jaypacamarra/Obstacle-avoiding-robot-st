
obstacle-avoiding-bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d4  080040d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040d4  080040d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d4  080040d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080040e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080040e8  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d079  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b56  00000000  00000000  0002d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024784  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5f9  00000000  00000000  00054b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee65d  00000000  00000000  0005f195  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d7f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  0014d870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040ac 	.word	0x080040ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080040ac 	.word	0x080040ac

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fcf5 	bl	8000c0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f896 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fac8 	bl	80007b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f8de 	bl	80003e8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800022c:	f000 f9be 	bl	80005ac <MX_TIM4_Init>
  MX_TIM3_Init();
 8000230:	f000 f944 	bl	80004bc <MX_TIM3_Init>
  MX_TIM8_Init();
 8000234:	f000 fa2c 	bl	8000690 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);	// start timer1
 8000238:	483f      	ldr	r0, [pc, #252]	; (8000338 <main+0x120>)
 800023a:	f001 fe2b 	bl	8001e94 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	// start input capture timer1
 800023e:	2100      	movs	r1, #0
 8000240:	483e      	ldr	r0, [pc, #248]	; (800033c <main+0x124>)
 8000242:	f002 f863 	bl	800230c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// start pwm on timer 3 channel 2 (MOTOR A)
 8000246:	2104      	movs	r1, #4
 8000248:	483d      	ldr	r0, [pc, #244]	; (8000340 <main+0x128>)
 800024a:	f001 feeb 	bl	8002024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);		// start pwm on timer 8 channel 1 (MOTOR B)
 800024e:	2100      	movs	r1, #0
 8000250:	483c      	ldr	r0, [pc, #240]	; (8000344 <main+0x12c>)
 8000252:	f001 fee7 	bl	8002024 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  distance = getDistance();	//get distance read from HC-SR04
 8000256:	f003 fe69 	bl	8003f2c <getDistance>
 800025a:	eef0 7a40 	vmov.f32	s15, s0
 800025e:	4b3a      	ldr	r3, [pc, #232]	; (8000348 <main+0x130>)
 8000260:	edc3 7a00 	vstr	s15, [r3]

	  if(distance < MIN_DISTANCE)
 8000264:	4b38      	ldr	r3, [pc, #224]	; (8000348 <main+0x130>)
 8000266:	edd3 7a00 	vldr	s15, [r3]
 800026a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800026e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000276:	d520      	bpl.n	80002ba <main+0xa2>
	  {
		  // Turn on RED LED
		  RGB_SET(1,0,0);
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	2001      	movs	r0, #1
 800027e:	f003 fd5b 	bl	8003d38 <RGB_SET>

		  // Set motor speeds to 0 for 0.5 seconds
		  setMotorDirection(LOW_STOP);
 8000282:	2005      	movs	r0, #5
 8000284:	f003 fda6 	bl	8003dd4 <setMotorDirection>
		  HAL_Delay(500);
 8000288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028c:	f000 fd2e 	bl	8000cec <HAL_Delay>

		  // Set motor speed to 50
		  setMotorASpeed(60);
 8000290:	203c      	movs	r0, #60	; 0x3c
 8000292:	f003 fd73 	bl	8003d7c <setMotorASpeed>
		  setMotorBSpeed(55);
 8000296:	2037      	movs	r0, #55	; 0x37
 8000298:	f003 fd86 	bl	8003da8 <setMotorBSpeed>

		  // Set motor direction to reverse for 1.5 seconds
		  setMotorDirection(REVERSE);
 800029c:	2002      	movs	r0, #2
 800029e:	f003 fd99 	bl	8003dd4 <setMotorDirection>
		  HAL_Delay(1500);
 80002a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80002a6:	f000 fd21 	bl	8000cec <HAL_Delay>

		  // Set motor direction to LEFT
		  setMotorDirection(LEFT);
 80002aa:	2003      	movs	r0, #3
 80002ac:	f003 fd92 	bl	8003dd4 <setMotorDirection>
		  HAL_Delay(2000);
 80002b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b4:	f000 fd1a 	bl	8000cec <HAL_Delay>
 80002b8:	e03a      	b.n	8000330 <main+0x118>

	  }
	  else if(distance >= MIN_DISTANCE && distance < MAX_DISTANCE)
 80002ba:	4b23      	ldr	r3, [pc, #140]	; (8000348 <main+0x130>)
 80002bc:	edd3 7a00 	vldr	s15, [r3]
 80002c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80002c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002cc:	db18      	blt.n	8000300 <main+0xe8>
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <main+0x130>)
 80002d0:	edd3 7a00 	vldr	s15, [r3]
 80002d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800034c <main+0x134>
 80002d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002e0:	d50e      	bpl.n	8000300 <main+0xe8>
	  {
		  // Turn on BLUE LED
		  RGB_SET(0,0,1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2100      	movs	r1, #0
 80002e6:	2000      	movs	r0, #0
 80002e8:	f003 fd26 	bl	8003d38 <RGB_SET>

		  // Set motor direction to forward
		  setMotorDirection(FORWARD);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f003 fd71 	bl	8003dd4 <setMotorDirection>

		  // Set motor speed to 60
		  setMotorASpeed(70);
 80002f2:	2046      	movs	r0, #70	; 0x46
 80002f4:	f003 fd42 	bl	8003d7c <setMotorASpeed>
		  setMotorBSpeed(65);
 80002f8:	2041      	movs	r0, #65	; 0x41
 80002fa:	f003 fd55 	bl	8003da8 <setMotorBSpeed>
 80002fe:	e017      	b.n	8000330 <main+0x118>
	  }
	  else if(distance >= MAX_DISTANCE)
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <main+0x130>)
 8000302:	edd3 7a00 	vldr	s15, [r3]
 8000306:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800034c <main+0x134>
 800030a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000312:	db0d      	blt.n	8000330 <main+0x118>
	  {
		  // Turn on GREEN LED
		  RGB_SET(0,1,0);
 8000314:	2200      	movs	r2, #0
 8000316:	2101      	movs	r1, #1
 8000318:	2000      	movs	r0, #0
 800031a:	f003 fd0d 	bl	8003d38 <RGB_SET>

		  // Set motor direction to forward
		  setMotorDirection(FORWARD);
 800031e:	2001      	movs	r0, #1
 8000320:	f003 fd58 	bl	8003dd4 <setMotorDirection>

		  // Set motor speed to 80
		  setMotorASpeed(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f003 fd29 	bl	8003d7c <setMotorASpeed>
		  setMotorBSpeed(95);
 800032a:	205f      	movs	r0, #95	; 0x5f
 800032c:	f003 fd3c 	bl	8003da8 <setMotorBSpeed>
	  }

	  HAL_Delay(70);	// delay before getting next distance value
 8000330:	2046      	movs	r0, #70	; 0x46
 8000332:	f000 fcdb 	bl	8000cec <HAL_Delay>
	  distance = getDistance();	//get distance read from HC-SR04
 8000336:	e78e      	b.n	8000256 <main+0x3e>
 8000338:	20000114 	.word	0x20000114
 800033c:	20000078 	.word	0x20000078
 8000340:	200000c8 	.word	0x200000c8
 8000344:	2000002c 	.word	0x2000002c
 8000348:	200000c4 	.word	0x200000c4
 800034c:	42480000 	.word	0x42480000

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b094      	sub	sp, #80	; 0x50
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2238      	movs	r2, #56	; 0x38
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fe9c 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000372:	2000      	movs	r0, #0
 8000374:	f000 ff86 	bl	8001284 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	2302      	movs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	2340      	movs	r3, #64	; 0x40
 8000384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800038e:	2304      	movs	r3, #4
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000392:	2355      	movs	r3, #85	; 0x55
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000396:	2302      	movs	r3, #2
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800039a:	2302      	movs	r3, #2
 800039c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800039e:	2302      	movs	r3, #2
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 f820 	bl	80013ec <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003b2:	f000 fa8b 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	230f      	movs	r3, #15
 80003b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	2303      	movs	r3, #3
 80003bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2104      	movs	r1, #4
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fb24 	bl	8001a1c <HAL_RCC_ClockConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003da:	f000 fa77 	bl	80008cc <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	3750      	adds	r7, #80	; 0x50
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b094      	sub	sp, #80	; 0x50
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2234      	movs	r2, #52	; 0x34
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f003 fe44 	bl	800409c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000416:	4a28      	ldr	r2, [pc, #160]	; (80004b8 <MX_TIM1_Init+0xd0>)
 8000418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_TIM1_Init+0xcc>)
 800041c:	22a9      	movs	r2, #169	; 0xa9
 800041e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000428:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800042c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_TIM1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000440:	481c      	ldr	r0, [pc, #112]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000442:	f001 fccf 	bl	8001de4 <HAL_TIM_Base_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800044c:	f000 fa3e 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000454:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800045a:	4619      	mov	r1, r3
 800045c:	4815      	ldr	r0, [pc, #84]	; (80004b4 <MX_TIM1_Init+0xcc>)
 800045e:	f002 fbc3 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000468:	f000 fa30 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800047c:	4619      	mov	r1, r3
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <MX_TIM1_Init+0xcc>)
 8000480:	f003 facc 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800048a:	f000 fa1f 	bl	80008cc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_TIM1_Init+0xcc>)
 800049c:	f003 fb54 	bl	8003b48 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80004a6:	f000 fa11 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3750      	adds	r7, #80	; 0x50
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000114 	.word	0x20000114
 80004b8:	40012c00 	.word	0x40012c00

080004bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_TIM3_Init+0xe8>)
 80004f0:	4a2d      	ldr	r2, [pc, #180]	; (80005a8 <MX_TIM3_Init+0xec>)
 80004f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1700-1;
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_TIM3_Init+0xe8>)
 80004f6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80004fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_TIM3_Init+0xe8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000504:	2263      	movs	r2, #99	; 0x63
 8000506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_TIM3_Init+0xe8>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000514:	4823      	ldr	r0, [pc, #140]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000516:	f001 fc65 	bl	8001de4 <HAL_TIM_Base_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000520:	f000 f9d4 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800052a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052e:	4619      	mov	r1, r3
 8000530:	481c      	ldr	r0, [pc, #112]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000532:	f002 fb59 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800053c:	f000 f9c6 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000540:	4818      	ldr	r0, [pc, #96]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000542:	f001 fd17 	bl	8001f74 <HAL_TIM_PWM_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800054c:	f000 f9be 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	4619      	mov	r1, r3
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000560:	f003 fa5c 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800056a:	f000 f9af 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	; 0x60
 8000570:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2204      	movs	r2, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000586:	f002 fa1f 	bl	80029c8 <HAL_TIM_PWM_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000590:	f000 f99c 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <MX_TIM3_Init+0xe8>)
 8000596:	f000 fa5d 	bl	8000a54 <HAL_TIM_MspPostInit>

}
 800059a:	bf00      	nop
 800059c:	3738      	adds	r7, #56	; 0x38
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000c8 	.word	0x200000c8
 80005a8:	40000400 	.word	0x40000400

080005ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <MX_TIM4_Init+0xdc>)
 80005da:	4a2c      	ldr	r2, [pc, #176]	; (800068c <MX_TIM4_Init+0xe0>)
 80005dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_TIM4_Init+0xdc>)
 80005e0:	22a9      	movs	r2, #169	; 0xa9
 80005e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_TIM4_Init+0xdc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65534;
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_TIM4_Init+0xdc>)
 80005ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80005f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_TIM4_Init+0xdc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_TIM4_Init+0xdc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <MX_TIM4_Init+0xdc>)
 8000600:	f001 fbf0 	bl	8001de4 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800060a:	f000 f95f 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4619      	mov	r1, r3
 800061a:	481b      	ldr	r0, [pc, #108]	; (8000688 <MX_TIM4_Init+0xdc>)
 800061c:	f002 fae4 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000626:	f000 f951 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800062a:	4817      	ldr	r0, [pc, #92]	; (8000688 <MX_TIM4_Init+0xdc>)
 800062c:	f001 fe0c 	bl	8002248 <HAL_TIM_IC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000636:	f000 f949 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <MX_TIM4_Init+0xdc>)
 800064a:	f003 f9e7 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000654:	f000 f93a 	bl	80008cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800065c:	2301      	movs	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_TIM4_Init+0xdc>)
 8000670:	f002 f915 	bl	800289e <HAL_TIM_IC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800067a:	f000 f927 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	; 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000078 	.word	0x20000078
 800068c:	40000800 	.word	0x40000800

08000690 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b098      	sub	sp, #96	; 0x60
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2234      	movs	r2, #52	; 0x34
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fced 	bl	800409c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006c4:	4a3b      	ldr	r2, [pc, #236]	; (80007b4 <MX_TIM8_Init+0x124>)
 80006c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1700-1;
 80006c8:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006ca:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80006ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80006d6:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006d8:	2263      	movs	r2, #99	; 0x63
 80006da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80006ee:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_TIM8_Init+0x120>)
 80006f0:	f001 fc40 	bl	8001f74 <HAL_TIM_PWM_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f8e7 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800070a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800070e:	4619      	mov	r1, r3
 8000710:	4827      	ldr	r0, [pc, #156]	; (80007b0 <MX_TIM8_Init+0x120>)
 8000712:	f003 f983 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800071c:	f000 f8d6 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_TIM8_Init+0x120>)
 8000746:	f002 f93f 	bl	80029c8 <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000750:	f000 f8bc 	bl	80008cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800077a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <MX_TIM8_Init+0x120>)
 8000792:	f003 f9d9 	bl	8003b48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800079c:	f000 f896 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <MX_TIM8_Init+0x120>)
 80007a2:	f000 f957 	bl	8000a54 <HAL_TIM_MspPostInit>

}
 80007a6:	bf00      	nop
 80007a8:	3760      	adds	r7, #96	; 0x60
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	40013400 	.word	0x40013400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_GPIO_Init+0xd8>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <MX_GPIO_Init+0xd8>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_GPIO_Init+0xd8>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_GPIO_Init+0xd8>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a29      	ldr	r2, [pc, #164]	; (8000890 <MX_GPIO_Init+0xd8>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_GPIO_Init+0xd8>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_GPIO_Init+0xd8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin|H_Bridge1_Control1_Pin
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fd18 	bl	8001254 <HAL_GPIO_WritePin>
                          |trigPin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, H_Bridge1_Control2_Pin|H_Bridge2_Control1_Pin|H_Bridge2_Control2_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <MX_GPIO_Init+0xdc>)
 800082c:	f000 fd12 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800083a:	2302      	movs	r3, #2
 800083c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_GPIO_Init+0xe0>)
 8000846:	f000 fb83 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin H_Bridge1_Control1_Pin
                           trigPin_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|H_Bridge1_Control1_Pin
 800084a:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 800084e:	60fb      	str	r3, [r7, #12]
                          |trigPin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fb73 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : H_Bridge1_Control2_Pin H_Bridge2_Control1_Pin H_Bridge2_Control2_Pin */
  GPIO_InitStruct.Pin = H_Bridge1_Control2_Pin|H_Bridge2_Control1_Pin|H_Bridge2_Control2_Pin;
 800086a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000884:	f000 fb64 	bl	8000f50 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400
 8000898:	48000800 	.word	0x48000800

0800089c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint16_t us)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
	// set the counter value to 0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <delay_us+0x2c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24

	// wait for the counter to reach the us input in the parameter
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 80008ae:	bf00      	nop
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <delay_us+0x2c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d3f9      	bcc.n	80008b0 <delay_us+0x14>
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000114 	.word	0x20000114

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <Error_Handler+0x6>

080008d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090a:	f000 fd5f 	bl	80013cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a32      	ldr	r2, [pc, #200]	; (8000a04 <HAL_TIM_Base_MspInit+0xe8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d114      	bne.n	8000968 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 8000944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000948:	6613      	str	r3, [r2, #96]	; 0x60
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	201b      	movs	r0, #27
 800095c:	f000 fac3 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000960:	201b      	movs	r0, #27
 8000962:	f000 fada 	bl	8000f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000966:	e048      	b.n	80009fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <HAL_TIM_Base_MspInit+0xf0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10c      	bne.n	800098c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6593      	str	r3, [r2, #88]	; 0x58
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
}
 800098a:	e036      	b.n	80009fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_TIM_Base_MspInit+0xf4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d131      	bne.n	80009fa <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6593      	str	r3, [r2, #88]	; 0x58
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <HAL_TIM_Base_MspInit+0xec>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80009d8:	230a      	movs	r3, #10
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fab3 	bl	8000f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	201e      	movs	r0, #30
 80009f0:	f000 fa79 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009f4:	201e      	movs	r0, #30
 80009f6:	f000 fa90 	bl	8000f1a <HAL_NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40012c00 	.word	0x40012c00
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	40000800 	.word	0x40000800

08000a14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_TIM_PWM_MspInit+0x38>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10b      	bne.n	8000a3e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40013400 	.word	0x40013400
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_TIM_MspPostInit+0xa8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d11c      	bne.n	8000ab0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <HAL_TIM_MspPostInit+0xac>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <HAL_TIM_MspPostInit+0xac>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_TIM_MspPostInit+0xac>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_A_Pin;
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_A_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4816      	ldr	r0, [pc, #88]	; (8000b04 <HAL_TIM_MspPostInit+0xb0>)
 8000aaa:	f000 fa51 	bl	8000f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000aae:	e020      	b.n	8000af2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_TIM_MspPostInit+0xb4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d11b      	bne.n	8000af2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_TIM_MspPostInit+0xac>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_TIM_MspPostInit+0xac>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_TIM_MspPostInit+0xac>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_B_Pin;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <HAL_TIM_MspPostInit+0xb8>)
 8000aee:	f000 fa2f 	bl	8000f50 <HAL_GPIO_Init>
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40000400 	.word	0x40000400
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000800 	.word	0x48000800
 8000b08:	40013400 	.word	0x40013400
 8000b0c:	48000400 	.word	0x48000400

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f8a8 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM1_CC_IRQHandler+0x10>)
 8000b6a:	f001 fd19 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000114 	.word	0x20000114

08000b78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM4_IRQHandler+0x10>)
 8000b7e:	f001 fd0f 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000078 	.word	0x20000078

08000b8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <SystemInit+0x28>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <SystemInit+0x28>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SystemInit+0x28>)
 8000ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ba6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be2:	f7ff ffd3 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f003 fa35 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bea:	f7ff fb15 	bl	8000218 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   r0, =_estack
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	080040dc 	.word	0x080040dc
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	2000016c 	.word	0x2000016c

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>

08000c0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f95b 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f80e 	bl	8000c3c <HAL_InitTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	e001      	b.n	8000c30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2c:	f7ff fe52 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c30:	79fb      	ldrb	r3, [r7, #7]

}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_InitTick+0x68>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d022      	beq.n	8000c96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_InitTick+0x6c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_InitTick+0x68>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f966 	bl	8000f36 <HAL_SYSTICK_Config>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10f      	bne.n	8000c90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	d809      	bhi.n	8000c8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c76:	2200      	movs	r2, #0
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7e:	f000 f932 	bl	8000ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_InitTick+0x70>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e007      	b.n	8000c9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e004      	b.n	8000c9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e001      	b.n	8000c9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <HAL_IncTick+0x1c>)
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20000160 	.word	0x20000160
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000160 	.word	0x20000160

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d004      	beq.n	8000d10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_Delay+0x40>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d10:	bf00      	nop
 8000d12:	f7ff ffdf 	bl	8000cd4 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d8f7      	bhi.n	8000d12 <HAL_Delay+0x26>
  {
  }
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff40 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff90 	bl	8000e24 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5f 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff33 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffa4 	bl	8000e8c <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f5e:	e15a      	b.n	8001216 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 814c 	beq.w	8001210 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d00b      	beq.n	8000f98 <HAL_GPIO_Init+0x48>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d007      	beq.n	8000f98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8c:	2b11      	cmp	r3, #17
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b12      	cmp	r3, #18
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0xea>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b12      	cmp	r3, #18
 8001038:	d123      	bne.n	8001082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	691a      	ldr	r2, [r3, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	6939      	ldr	r1, [r7, #16]
 800107e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0203 	and.w	r2, r3, #3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 80a6 	beq.w	8001210 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c4:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <HAL_GPIO_Init+0x2e4>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	4a5a      	ldr	r2, [pc, #360]	; (8001234 <HAL_GPIO_Init+0x2e4>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6613      	str	r3, [r2, #96]	; 0x60
 80010d0:	4b58      	ldr	r3, [pc, #352]	; (8001234 <HAL_GPIO_Init+0x2e4>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010dc:	4a56      	ldr	r2, [pc, #344]	; (8001238 <HAL_GPIO_Init+0x2e8>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001106:	d01f      	beq.n	8001148 <HAL_GPIO_Init+0x1f8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x2ec>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d019      	beq.n	8001144 <HAL_GPIO_Init+0x1f4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1f0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4a      	ldr	r2, [pc, #296]	; (8001244 <HAL_GPIO_Init+0x2f4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1ec>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2f8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1e8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2fc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1e4>
 8001130:	2305      	movs	r3, #5
 8001132:	e00a      	b.n	800114a <HAL_GPIO_Init+0x1fa>
 8001134:	2306      	movs	r3, #6
 8001136:	e008      	b.n	800114a <HAL_GPIO_Init+0x1fa>
 8001138:	2304      	movs	r3, #4
 800113a:	e006      	b.n	800114a <HAL_GPIO_Init+0x1fa>
 800113c:	2303      	movs	r3, #3
 800113e:	e004      	b.n	800114a <HAL_GPIO_Init+0x1fa>
 8001140:	2302      	movs	r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x1fa>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_GPIO_Init+0x1fa>
 8001148:	2300      	movs	r3, #0
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4093      	lsls	r3, r2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115a:	4937      	ldr	r1, [pc, #220]	; (8001238 <HAL_GPIO_Init+0x2e8>)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <HAL_GPIO_Init+0x300>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118c:	4a30      	ldr	r2, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x300>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x300>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x300>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_GPIO_Init+0x300>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x300>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_GPIO_Init+0x300>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_GPIO_Init+0x300>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	f47f ae9d 	bne.w	8000f60 <HAL_GPIO_Init+0x10>
  }
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00
 8001248:	48001000 	.word	0x48001000
 800124c:	48001400 	.word	0x48001400
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001270:	e002      	b.n	8001278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d141      	bne.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001292:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d131      	bne.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a6:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b8:	4a41      	ldr	r2, [pc, #260]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2232      	movs	r2, #50	; 0x32
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9b      	lsrs	r3, r3, #18
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d6:	e002      	b.n	80012de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3b01      	subs	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ea:	d102      	bne.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f2      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	d158      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e057      	b.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001304:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001314:	e04d      	b.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d141      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132a:	d131      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001344:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2232      	movs	r2, #50	; 0x32
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0c9b      	lsrs	r3, r3, #18
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001362:	e002      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3b01      	subs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d102      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f2      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d112      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e011      	b.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013a0:	e007      	b.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40007000 	.word	0x40007000
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83

080013cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013da:	6093      	str	r3, [r2, #8]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40007000 	.word	0x40007000

080013ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e308      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d075      	beq.n	80014f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4ba3      	ldr	r3, [pc, #652]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001414:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x3e>
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d002      	beq.n	8001430 <HAL_RCC_OscConfig+0x44>
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4b99      	ldr	r3, [pc, #612]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d05b      	beq.n	80014f4 <HAL_RCC_OscConfig+0x108>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d157      	bne.n	80014f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e2e3      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x74>
 8001452:	4b91      	ldr	r3, [pc, #580]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a90      	ldr	r2, [pc, #576]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x98>
 800146a:	4b8b      	ldr	r3, [pc, #556]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a8a      	ldr	r2, [pc, #552]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a87      	ldr	r2, [pc, #540]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a83      	ldr	r2, [pc, #524]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a80      	ldr	r2, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc16 	bl	8000cd4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fc12 	bl	8000cd4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e2a8      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xc0>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fc02 	bl	8000cd4 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fbfe 	bl	8000cd4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e294      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0xe8>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d075      	beq.n	80015ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001502:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d102      	bne.n	8001522 <HAL_RCC_OscConfig+0x136>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d002      	beq.n	8001528 <HAL_RCC_OscConfig+0x13c>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d11f      	bne.n	8001568 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x154>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e267      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	4952      	ldr	r1, [pc, #328]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x2b0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb6f 	bl	8000c3c <HAL_InitTick>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d043      	beq.n	80015ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e253      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d023      	beq.n	80015b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fbaa 	bl	8000cd4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fba6 	bl	8000cd4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e23c      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001596:	4b40      	ldr	r3, [pc, #256]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	061b      	lsls	r3, r3, #24
 80015b0:	4939      	ldr	r1, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e01a      	b.n	80015ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb86 	bl	8000cd4 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fb82 	bl	8000cd4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e218      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1e0>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d03c      	beq.n	8001674 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01c      	beq.n	800163c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001608:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fb5f 	bl	8000cd4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fb5b 	bl	8000cd4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1f1      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ef      	beq.n	800161a <HAL_RCC_OscConfig+0x22e>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fb42 	bl	8000cd4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fb3e 	bl	8000cd4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1d4      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ef      	bne.n	8001654 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80ab 	beq.w	80017d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2b4>
 8001692:	2301      	movs	r3, #1
 8001694:	e005      	b.n	80016a2 <HAL_RCC_OscConfig+0x2b6>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	20000004 	.word	0x20000004
 80016a0:	2300      	movs	r3, #0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00d      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4baf      	ldr	r3, [pc, #700]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4aae      	ldr	r2, [pc, #696]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4bac      	ldr	r3, [pc, #688]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	4ba9      	ldr	r3, [pc, #676]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ce:	4ba6      	ldr	r3, [pc, #664]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4aa5      	ldr	r2, [pc, #660]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fafb 	bl	8000cd4 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff faf7 	bl	8000cd4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e18d      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f4:	4b9c      	ldr	r3, [pc, #624]	; (8001968 <HAL_RCC_OscConfig+0x57c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <HAL_RCC_OscConfig+0x32e>
 8001708:	4b96      	ldr	r3, [pc, #600]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a95      	ldr	r2, [pc, #596]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	e024      	b.n	8001764 <HAL_RCC_OscConfig+0x378>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d110      	bne.n	8001744 <HAL_RCC_OscConfig+0x358>
 8001722:	4b90      	ldr	r3, [pc, #576]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	4a8e      	ldr	r2, [pc, #568]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001732:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001742:	e00f      	b.n	8001764 <HAL_RCC_OscConfig+0x378>
 8001744:	4b87      	ldr	r3, [pc, #540]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a86      	ldr	r2, [pc, #536]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001754:	4b83      	ldr	r3, [pc, #524]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	4a82      	ldr	r2, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d016      	beq.n	800179a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fab2 	bl	8000cd4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff faae 	bl	8000cd4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e142      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ed      	beq.n	8001774 <HAL_RCC_OscConfig+0x388>
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff fa9b 	bl	8000cd4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff fa97 	bl	8000cd4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e12b      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ed      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a64      	ldr	r2, [pc, #400]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03c      	beq.n	800185e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01c      	beq.n	8001826 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017ec:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa6a 	bl	8000cd4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001804:	f7ff fa66 	bl	8000cd4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0fc      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001816:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ef      	beq.n	8001804 <HAL_RCC_OscConfig+0x418>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001826:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fa4d 	bl	8000cd4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183e:	f7ff fa49 	bl	8000cd4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0df      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80d3 	beq.w	8001a0e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b0c      	cmp	r3, #12
 8001872:	f000 808d 	beq.w	8001990 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d15a      	bne.n	8001934 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff fa23 	bl	8000cd4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fa1f 	bl	8000cd4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0b5      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_OscConfig+0x580>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6a11      	ldr	r1, [r2, #32]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018c0:	3a01      	subs	r2, #1
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018ca:	0212      	lsls	r2, r2, #8
 80018cc:	4311      	orrs	r1, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018d2:	0852      	lsrs	r2, r2, #1
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0552      	lsls	r2, r2, #21
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018de:	0852      	lsrs	r2, r2, #1
 80018e0:	3a01      	subs	r2, #1
 80018e2:	0652      	lsls	r2, r2, #25
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018ea:	06d2      	lsls	r2, r2, #27
 80018ec:	430a      	orrs	r2, r1
 80018ee:	491d      	ldr	r1, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff f9e2 	bl	8000cd4 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f9de 	bl	8000cd4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e074      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x528>
 8001932:	e06c      	b.n	8001a0e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x578>)
 8001952:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f9ba 	bl	8000cd4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001962:	e00e      	b.n	8001982 <HAL_RCC_OscConfig+0x596>
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f9b0 	bl	8000cd4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e046      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_RCC_OscConfig+0x62c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x584>
 800198e:	e03e      	b.n	8001a0e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e039      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCC_OscConfig+0x62c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d12c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d123      	bne.n	8001a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d11b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d113      	bne.n	8001a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e11e      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b91      	ldr	r3, [pc, #580]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d910      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 020f 	bic.w	r2, r3, #15
 8001a4a:	498c      	ldr	r1, [pc, #560]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e106      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d073      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d129      	bne.n	8001acc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a78:	4b81      	ldr	r3, [pc, #516]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0f4      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a88:	f000 f966 	bl	8001d58 <RCC_GetSysClockFreqFromPLLSource>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4a7c      	ldr	r2, [pc, #496]	; (8001c84 <HAL_RCC_ClockConfig+0x268>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d93f      	bls.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d033      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d12f      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ab6:	4b72      	ldr	r3, [pc, #456]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001abe:	4a70      	ldr	r2, [pc, #448]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e024      	b.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0c6      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0be      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001af4:	f000 f8ce 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4a61      	ldr	r2, [pc, #388]	; (8001c84 <HAL_RCC_ClockConfig+0x268>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d909      	bls.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b02:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0a:	4a5d      	ldr	r2, [pc, #372]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4957      	ldr	r1, [pc, #348]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b28:	f7ff f8d4 	bl	8000cd4 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f8d0 	bl	8000cd4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e095      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d023      	beq.n	8001bac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a42      	ldr	r2, [pc, #264]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b88:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b90:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4936      	ldr	r1, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bbc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d21d      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 020f 	bic.w	r2, r3, #15
 8001bd4:	4929      	ldr	r1, [pc, #164]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f87a 	bl	8000cd4 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7ff f876 	bl	8000cd4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e03b      	b.n	8001c72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1ed      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4917      	ldr	r1, [pc, #92]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	490f      	ldr	r1, [pc, #60]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c46:	f000 f825 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_RCC_ClockConfig+0x26c>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe ffe6 	bl	8000c3c <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	04c4b400 	.word	0x04c4b400
 8001c88:	080040c4 	.word	0x080040c4
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e047      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e03e      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d136      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf2:	68d2      	ldr	r2, [r2, #12]
 8001cf4:	0a12      	lsrs	r2, r2, #8
 8001cf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
      break;
 8001d00:	e00c      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0c:	68d2      	ldr	r2, [r2, #12]
 8001d0e:	0a12      	lsrs	r2, r2, #8
 8001d10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0e5b      	lsrs	r3, r3, #25
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	e001      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d3c:	693b      	ldr	r3, [r7, #16]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	00f42400 	.word	0x00f42400
 8001d54:	016e3600 	.word	0x016e3600

08001d58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3301      	adds	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d10c      	bne.n	8001d96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d7c:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d86:	68d2      	ldr	r2, [r2, #12]
 8001d88:	0a12      	lsrs	r2, r2, #8
 8001d8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
    break;
 8001d94:	e00c      	b.n	8001db0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da0:	68d2      	ldr	r2, [r2, #12]
 8001da2:	0a12      	lsrs	r2, r2, #8
 8001da4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    break;
 8001dae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0e5b      	lsrs	r3, r3, #25
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	016e3600 	.word	0x016e3600
 8001de0:	00f42400 	.word	0x00f42400

08001de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e049      	b.n	8001e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fd86 	bl	800091c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f001 f83c 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d001      	beq.n	8001eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e04c      	b.n	8001f46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_TIM_Base_Start+0xc0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d022      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec6:	d01d      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_TIM_Base_Start+0xc4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d018      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_TIM_Base_Start+0xc8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_TIM_Base_Start+0xcc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00e      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_TIM_Base_Start+0xd0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d009      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_TIM_Base_Start+0xd4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_TIM_Base_Start+0x70>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_TIM_Base_Start+0xd8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d115      	bne.n	8001f30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_TIM_Base_Start+0xdc>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d015      	beq.n	8001f42 <HAL_TIM_Base_Start+0xae>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d011      	beq.n	8001f42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	e008      	b.n	8001f42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e000      	b.n	8001f44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40013400 	.word	0x40013400
 8001f68:	40014000 	.word	0x40014000
 8001f6c:	40015000 	.word	0x40015000
 8001f70:	00010007 	.word	0x00010007

08001f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e049      	b.n	800201a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd3a 	bl	8000a14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 ff74 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_TIM_PWM_Start+0x24>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e03c      	b.n	80020c2 <HAL_TIM_PWM_Start+0x9e>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d109      	bne.n	8002062 <HAL_TIM_PWM_Start+0x3e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e02f      	b.n	80020c2 <HAL_TIM_PWM_Start+0x9e>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d109      	bne.n	800207c <HAL_TIM_PWM_Start+0x58>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e022      	b.n	80020c2 <HAL_TIM_PWM_Start+0x9e>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d109      	bne.n	8002096 <HAL_TIM_PWM_Start+0x72>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e015      	b.n	80020c2 <HAL_TIM_PWM_Start+0x9e>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b10      	cmp	r3, #16
 800209a:	d109      	bne.n	80020b0 <HAL_TIM_PWM_Start+0x8c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e008      	b.n	80020c2 <HAL_TIM_PWM_Start+0x9e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0a6      	b.n	8002218 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <HAL_TIM_PWM_Start+0xb6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	e023      	b.n	8002122 <HAL_TIM_PWM_Start+0xfe>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d104      	bne.n	80020ea <HAL_TIM_PWM_Start+0xc6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e8:	e01b      	b.n	8002122 <HAL_TIM_PWM_Start+0xfe>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d104      	bne.n	80020fa <HAL_TIM_PWM_Start+0xd6>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f8:	e013      	b.n	8002122 <HAL_TIM_PWM_Start+0xfe>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d104      	bne.n	800210a <HAL_TIM_PWM_Start+0xe6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002108:	e00b      	b.n	8002122 <HAL_TIM_PWM_Start+0xfe>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start+0xf6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002118:	e003      	b.n	8002122 <HAL_TIM_PWM_Start+0xfe>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fc50 	bl	80039d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <HAL_TIM_PWM_Start+0x1fc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d018      	beq.n	800216c <HAL_TIM_PWM_Start+0x148>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a39      	ldr	r2, [pc, #228]	; (8002224 <HAL_TIM_PWM_Start+0x200>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_TIM_PWM_Start+0x148>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a37      	ldr	r2, [pc, #220]	; (8002228 <HAL_TIM_PWM_Start+0x204>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <HAL_TIM_PWM_Start+0x148>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a36      	ldr	r2, [pc, #216]	; (800222c <HAL_TIM_PWM_Start+0x208>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_TIM_PWM_Start+0x148>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_TIM_PWM_Start+0x20c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_TIM_PWM_Start+0x148>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a33      	ldr	r2, [pc, #204]	; (8002234 <HAL_TIM_PWM_Start+0x210>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_TIM_PWM_Start+0x14c>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_TIM_PWM_Start+0x14e>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_TIM_PWM_Start+0x1fc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d01d      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a26      	ldr	r2, [pc, #152]	; (8002238 <HAL_TIM_PWM_Start+0x214>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <HAL_TIM_PWM_Start+0x218>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_TIM_PWM_Start+0x21c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_PWM_Start+0x200>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_TIM_PWM_Start+0x204>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x1b2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_PWM_Start+0x210>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d115      	bne.n	8002202 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_TIM_PWM_Start+0x220>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d015      	beq.n	8002214 <HAL_TIM_PWM_Start+0x1f0>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d011      	beq.n	8002214 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002200:	e008      	b.n	8002214 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e000      	b.n	8002216 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002214:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40013400 	.word	0x40013400
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800
 8002234:	40015000 	.word	0x40015000
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	00010007 	.word	0x00010007

08002248 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e049      	b.n	80022ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f841 	bl	80022f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 fe0a 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_TIM_IC_Start_IT+0x1a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002322:	b2db      	uxtb	r3, r3
 8002324:	e023      	b.n	800236e <HAL_TIM_IC_Start_IT+0x62>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d104      	bne.n	8002336 <HAL_TIM_IC_Start_IT+0x2a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e01b      	b.n	800236e <HAL_TIM_IC_Start_IT+0x62>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_TIM_IC_Start_IT+0x3a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002342:	b2db      	uxtb	r3, r3
 8002344:	e013      	b.n	800236e <HAL_TIM_IC_Start_IT+0x62>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d104      	bne.n	8002356 <HAL_TIM_IC_Start_IT+0x4a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	e00b      	b.n	800236e <HAL_TIM_IC_Start_IT+0x62>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d104      	bne.n	8002366 <HAL_TIM_IC_Start_IT+0x5a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e003      	b.n	800236e <HAL_TIM_IC_Start_IT+0x62>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800236c:	b2db      	uxtb	r3, r3
 800236e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_TIM_IC_Start_IT+0x74>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e013      	b.n	80023a8 <HAL_TIM_IC_Start_IT+0x9c>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b04      	cmp	r3, #4
 8002384:	d104      	bne.n	8002390 <HAL_TIM_IC_Start_IT+0x84>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e00b      	b.n	80023a8 <HAL_TIM_IC_Start_IT+0x9c>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b08      	cmp	r3, #8
 8002394:	d104      	bne.n	80023a0 <HAL_TIM_IC_Start_IT+0x94>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e003      	b.n	80023a8 <HAL_TIM_IC_Start_IT+0x9c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80023b0:	7bbb      	ldrb	r3, [r7, #14]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0dd      	b.n	8002576 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_TIM_IC_Start_IT+0xbe>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c8:	e023      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x106>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d104      	bne.n	80023da <HAL_TIM_IC_Start_IT+0xce>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	e01b      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x106>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d104      	bne.n	80023ea <HAL_TIM_IC_Start_IT+0xde>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	e013      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x106>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_IC_Start_IT+0xee>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023f8:	e00b      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x106>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d104      	bne.n	800240a <HAL_TIM_IC_Start_IT+0xfe>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002408:	e003      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x106>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <HAL_TIM_IC_Start_IT+0x116>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	e013      	b.n	800244a <HAL_TIM_IC_Start_IT+0x13e>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d104      	bne.n	8002432 <HAL_TIM_IC_Start_IT+0x126>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002430:	e00b      	b.n	800244a <HAL_TIM_IC_Start_IT+0x13e>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d104      	bne.n	8002442 <HAL_TIM_IC_Start_IT+0x136>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002440:	e003      	b.n	800244a <HAL_TIM_IC_Start_IT+0x13e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d841      	bhi.n	80024d4 <HAL_TIM_IC_Start_IT+0x1c8>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_TIM_IC_Start_IT+0x14c>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800248d 	.word	0x0800248d
 800245c:	080024d5 	.word	0x080024d5
 8002460:	080024d5 	.word	0x080024d5
 8002464:	080024d5 	.word	0x080024d5
 8002468:	0800249f 	.word	0x0800249f
 800246c:	080024d5 	.word	0x080024d5
 8002470:	080024d5 	.word	0x080024d5
 8002474:	080024d5 	.word	0x080024d5
 8002478:	080024b1 	.word	0x080024b1
 800247c:	080024d5 	.word	0x080024d5
 8002480:	080024d5 	.word	0x080024d5
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080024c3 	.word	0x080024c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0202 	orr.w	r2, r2, #2
 800249a:	60da      	str	r2, [r3, #12]
      break;
 800249c:	e01b      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0204 	orr.w	r2, r2, #4
 80024ac:	60da      	str	r2, [r3, #12]
      break;
 80024ae:	e012      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	60da      	str	r2, [r3, #12]
      break;
 80024c0:	e009      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0210 	orr.w	r2, r2, #16
 80024d0:	60da      	str	r2, [r3, #12]
      break;
 80024d2:	e000      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80024d4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 fa76 	bl	80039d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_TIM_IC_Start_IT+0x274>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d01d      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_IC_Start_IT+0x278>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a20      	ldr	r2, [pc, #128]	; (8002588 <HAL_TIM_IC_Start_IT+0x27c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_TIM_IC_Start_IT+0x280>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_TIM_IC_Start_IT+0x284>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <HAL_TIM_IC_Start_IT+0x288>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_TIM_IC_Start_IT+0x228>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_TIM_IC_Start_IT+0x28c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d115      	bne.n	8002560 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_TIM_IC_Start_IT+0x290>)
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d015      	beq.n	8002572 <HAL_TIM_IC_Start_IT+0x266>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d011      	beq.n	8002572 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e008      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e000      	b.n	8002574 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40013400 	.word	0x40013400
 8002594:	40014000 	.word	0x40014000
 8002598:	40015000 	.word	0x40015000
 800259c:	00010007 	.word	0x00010007

080025a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0202 	mvn.w	r2, #2
 80025cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f001 fcbe 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fc3a 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fc41 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0204 	mvn.w	r2, #4
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f001 fc94 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fc10 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc17 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0208 	mvn.w	r2, #8
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f001 fc6a 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fbe6 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fbed 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f001 fc40 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fbbc 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fbc3 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0201 	mvn.w	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fb96 	bl	8002e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f001 fab8 	bl	8003cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275e:	d10e      	bne.n	800277e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d107      	bne.n	800277e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 faab 	bl	8003cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d10e      	bne.n	80027aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d107      	bne.n	80027aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fb71 	bl	8002e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d10e      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d107      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f06f 0220 	mvn.w	r2, #32
 80027ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f001 fa6b 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e4:	d10f      	bne.n	8002806 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f4:	d107      	bne.n	8002806 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80027fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f001 fa71 	bl	8003ce8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002814:	d10f      	bne.n	8002836 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002824:	d107      	bne.n	8002836 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800282e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f001 fa63 	bl	8003cfc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002844:	d10f      	bne.n	8002866 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002854:	d107      	bne.n	8002866 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f001 fa55 	bl	8003d10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002870:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002874:	d10f      	bne.n	8002896 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002880:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002884:	d107      	bne.n	8002896 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800288e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f001 fa47 	bl	8003d24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e082      	b.n	80029be <HAL_TIM_IC_ConfigChannel+0x120>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11b      	bne.n	80028fe <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f000 feb5 	bl	8003644 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 020c 	bic.w	r2, r2, #12
 80028e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6999      	ldr	r1, [r3, #24]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	619a      	str	r2, [r3, #24]
 80028fc:	e05a      	b.n	80029b4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d11c      	bne.n	800293e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f000 ff39 	bl	800378a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002926:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6999      	ldr	r1, [r3, #24]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	021a      	lsls	r2, r3, #8
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	619a      	str	r2, [r3, #24]
 800293c:	e03a      	b.n	80029b4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f000 ff86 	bl	8003864 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020c 	bic.w	r2, r2, #12
 8002966:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69d9      	ldr	r1, [r3, #28]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	61da      	str	r2, [r3, #28]
 800297a:	e01b      	b.n	80029b4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f000 ffa6 	bl	80038dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800299e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69d9      	ldr	r1, [r3, #28]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e0fd      	b.n	8002bde <HAL_TIM_PWM_ConfigChannel+0x216>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b14      	cmp	r3, #20
 80029ee:	f200 80f0 	bhi.w	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a4d 	.word	0x08002a4d
 80029fc:	08002bd3 	.word	0x08002bd3
 8002a00:	08002bd3 	.word	0x08002bd3
 8002a04:	08002bd3 	.word	0x08002bd3
 8002a08:	08002a8d 	.word	0x08002a8d
 8002a0c:	08002bd3 	.word	0x08002bd3
 8002a10:	08002bd3 	.word	0x08002bd3
 8002a14:	08002bd3 	.word	0x08002bd3
 8002a18:	08002acf 	.word	0x08002acf
 8002a1c:	08002bd3 	.word	0x08002bd3
 8002a20:	08002bd3 	.word	0x08002bd3
 8002a24:	08002bd3 	.word	0x08002bd3
 8002a28:	08002b0f 	.word	0x08002b0f
 8002a2c:	08002bd3 	.word	0x08002bd3
 8002a30:	08002bd3 	.word	0x08002bd3
 8002a34:	08002bd3 	.word	0x08002bd3
 8002a38:	08002b51 	.word	0x08002b51
 8002a3c:	08002bd3 	.word	0x08002bd3
 8002a40:	08002bd3 	.word	0x08002bd3
 8002a44:	08002bd3 	.word	0x08002bd3
 8002a48:	08002b91 	.word	0x08002b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 facc 	bl	8002ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0208 	orr.w	r2, r2, #8
 8002a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0204 	bic.w	r2, r2, #4
 8002a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	619a      	str	r2, [r3, #24]
      break;
 8002a8a:	e0a3      	b.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb46 	bl	8003124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6999      	ldr	r1, [r3, #24]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	021a      	lsls	r2, r3, #8
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	619a      	str	r2, [r3, #24]
      break;
 8002acc:	e082      	b.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fbb9 	bl	800324c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0208 	orr.w	r2, r2, #8
 8002ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0204 	bic.w	r2, r2, #4
 8002af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69d9      	ldr	r1, [r3, #28]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
      break;
 8002b0c:	e062      	b.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fc2b 	bl	8003370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69d9      	ldr	r1, [r3, #28]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	021a      	lsls	r2, r3, #8
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	61da      	str	r2, [r3, #28]
      break;
 8002b4e:	e041      	b.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fc9e 	bl	8003498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0208 	orr.w	r2, r2, #8
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002b8e:	e021      	b.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fce8 	bl	800356c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002baa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002bd0:	e000      	b.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002bd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop

08002be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_ConfigClockSource+0x18>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0d2      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x1be>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3c:	f000 80a9 	beq.w	8002d92 <HAL_TIM_ConfigClockSource+0x1aa>
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c44:	d81a      	bhi.n	8002c7c <HAL_TIM_ConfigClockSource+0x94>
 8002c46:	2b30      	cmp	r3, #48	; 0x30
 8002c48:	f000 809a 	beq.w	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002c4c:	2b30      	cmp	r3, #48	; 0x30
 8002c4e:	d809      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x7c>
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	f000 8095 	beq.w	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f000 8092 	beq.w	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 808f 	beq.w	8002d80 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c62:	e097      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002c64:	2b50      	cmp	r3, #80	; 0x50
 8002c66:	d05b      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0x138>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d802      	bhi.n	8002c72 <HAL_TIM_ConfigClockSource+0x8a>
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d077      	beq.n	8002d60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c70:	e090      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002c72:	2b60      	cmp	r3, #96	; 0x60
 8002c74:	d064      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x158>
 8002c76:	2b70      	cmp	r3, #112	; 0x70
 8002c78:	d028      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8002c7a:	e08b      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_TIM_ConfigClockSource+0x1c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d07e      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002c82:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <HAL_TIM_ConfigClockSource+0x1c8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d810      	bhi.n	8002caa <HAL_TIM_ConfigClockSource+0xc2>
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8c:	d078      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c92:	d803      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0xb4>
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	d02f      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x112>
      break;
 8002c9a:	e07b      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002c9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002ca0:	d06e      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002ca2:	4a44      	ldr	r2, [pc, #272]	; (8002db4 <HAL_TIM_ConfigClockSource+0x1cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d06b      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8002ca8:	e074      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002caa:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_TIM_ConfigClockSource+0x1d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d067      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002cb0:	4a41      	ldr	r2, [pc, #260]	; (8002db8 <HAL_TIM_ConfigClockSource+0x1d0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d803      	bhi.n	8002cbe <HAL_TIM_ConfigClockSource+0xd6>
 8002cb6:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_TIM_ConfigClockSource+0x1d4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d061      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8002cbc:	e06a      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HAL_TIM_ConfigClockSource+0x1d8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d05d      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
 8002cc4:	4a3f      	ldr	r2, [pc, #252]	; (8002dc4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d05a      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8002cca:	e063      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f000 fe58 	bl	8003990 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
      break;
 8002cf8:	e04c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f000 fe41 	bl	8003990 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1c:	609a      	str	r2, [r3, #8]
      break;
 8002d1e:	e039      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f000 fcfd 	bl	800372c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2150      	movs	r1, #80	; 0x50
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fe0c 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e029      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f000 fd59 	bl	8003804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2160      	movs	r1, #96	; 0x60
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fdfc 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8002d5e:	e019      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f000 fcdd 	bl	800372c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fdec 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8002d7e:	e009      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f000 fde3 	bl	8003956 <TIM_ITRx_SetConfig>
        break;
 8002d90:	e000      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8002d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	00100030 	.word	0x00100030
 8002db4:	00100020 	.word	0x00100020
 8002db8:	00100050 	.word	0x00100050
 8002dbc:	00100040 	.word	0x00100040
 8002dc0:	00100060 	.word	0x00100060
 8002dc4:	00100070 	.word	0x00100070

08002dc8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d831      	bhi.n	8002e40 <HAL_TIM_ReadCapturedValue+0x78>
 8002ddc:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002e41 	.word	0x08002e41
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e41 	.word	0x08002e41
 8002dfc:	08002e41 	.word	0x08002e41
 8002e00:	08002e41 	.word	0x08002e41
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e41 	.word	0x08002e41
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e41 	.word	0x08002e41
 8002e14:	08002e37 	.word	0x08002e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	60fb      	str	r3, [r7, #12]

      break;
 8002e20:	e00f      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	60fb      	str	r3, [r7, #12]

      break;
 8002e2a:	e00a      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	60fb      	str	r3, [r7, #12]

      break;
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	60fb      	str	r3, [r7, #12]

      break;
 8002e3e:	e000      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e40:	bf00      	nop
  }

  return tmpreg;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a46      	ldr	r2, [pc, #280]	; (8002fcc <TIM_Base_SetConfig+0x12c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d017      	beq.n	8002ee8 <TIM_Base_SetConfig+0x48>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d013      	beq.n	8002ee8 <TIM_Base_SetConfig+0x48>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <TIM_Base_SetConfig+0x130>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <TIM_Base_SetConfig+0x48>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a42      	ldr	r2, [pc, #264]	; (8002fd4 <TIM_Base_SetConfig+0x134>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <TIM_Base_SetConfig+0x48>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a41      	ldr	r2, [pc, #260]	; (8002fd8 <TIM_Base_SetConfig+0x138>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0x48>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <TIM_Base_SetConfig+0x13c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x48>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <TIM_Base_SetConfig+0x140>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <TIM_Base_SetConfig+0x12c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d023      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d01f      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <TIM_Base_SetConfig+0x130>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01b      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <TIM_Base_SetConfig+0x134>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d017      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <TIM_Base_SetConfig+0x138>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <TIM_Base_SetConfig+0x13c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2d      	ldr	r2, [pc, #180]	; (8002fe4 <TIM_Base_SetConfig+0x144>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <TIM_Base_SetConfig+0x148>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <TIM_Base_SetConfig+0x14c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <TIM_Base_SetConfig+0x140>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <TIM_Base_SetConfig+0x12c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <TIM_Base_SetConfig+0x110>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <TIM_Base_SetConfig+0x13c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00f      	beq.n	8002fb0 <TIM_Base_SetConfig+0x110>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_Base_SetConfig+0x144>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_Base_SetConfig+0x110>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <TIM_Base_SetConfig+0x148>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0x110>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <TIM_Base_SetConfig+0x14c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0x110>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <TIM_Base_SetConfig+0x140>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40013400 	.word	0x40013400
 8002fe0:	40015000 	.word	0x40015000
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	40014400 	.word	0x40014400
 8002fec:	40014800 	.word	0x40014800

08002ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 0302 	bic.w	r3, r3, #2
 800303c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a30      	ldr	r2, [pc, #192]	; (800310c <TIM_OC1_SetConfig+0x11c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <TIM_OC1_SetConfig+0x88>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <TIM_OC1_SetConfig+0x120>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00f      	beq.n	8003078 <TIM_OC1_SetConfig+0x88>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a2e      	ldr	r2, [pc, #184]	; (8003114 <TIM_OC1_SetConfig+0x124>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00b      	beq.n	8003078 <TIM_OC1_SetConfig+0x88>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <TIM_OC1_SetConfig+0x128>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <TIM_OC1_SetConfig+0x88>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <TIM_OC1_SetConfig+0x12c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_OC1_SetConfig+0x88>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <TIM_OC1_SetConfig+0x130>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10c      	bne.n	8003092 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f023 0308 	bic.w	r3, r3, #8
 800307e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <TIM_OC1_SetConfig+0x11c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_OC1_SetConfig+0xd2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <TIM_OC1_SetConfig+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_OC1_SetConfig+0xd2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <TIM_OC1_SetConfig+0x124>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_OC1_SetConfig+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <TIM_OC1_SetConfig+0x128>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_OC1_SetConfig+0xd2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <TIM_OC1_SetConfig+0x12c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_OC1_SetConfig+0xd2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <TIM_OC1_SetConfig+0x130>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40013400 	.word	0x40013400
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800
 8003120:	40015000 	.word	0x40015000

08003124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 0320 	bic.w	r3, r3, #32
 8003172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <TIM_OC2_SetConfig+0x110>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_OC2_SetConfig+0x74>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <TIM_OC2_SetConfig+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_OC2_SetConfig+0x74>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2a      	ldr	r2, [pc, #168]	; (800323c <TIM_OC2_SetConfig+0x118>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10d      	bne.n	80031b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <TIM_OC2_SetConfig+0x110>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <TIM_OC2_SetConfig+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <TIM_OC2_SetConfig+0x114>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00f      	beq.n	80031e4 <TIM_OC2_SetConfig+0xc0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <TIM_OC2_SetConfig+0x11c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_OC2_SetConfig+0xc0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <TIM_OC2_SetConfig+0x120>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <TIM_OC2_SetConfig+0xc0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <TIM_OC2_SetConfig+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_OC2_SetConfig+0xc0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <TIM_OC2_SetConfig+0x118>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d113      	bne.n	800320c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40015000 	.word	0x40015000
 8003240:	40014000 	.word	0x40014000
 8003244:	40014400 	.word	0x40014400
 8003248:	40014800 	.word	0x40014800

0800324c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <TIM_OC3_SetConfig+0x10c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_OC3_SetConfig+0x72>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2a      	ldr	r2, [pc, #168]	; (800335c <TIM_OC3_SetConfig+0x110>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_OC3_SetConfig+0x72>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a29      	ldr	r2, [pc, #164]	; (8003360 <TIM_OC3_SetConfig+0x114>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10d      	bne.n	80032da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <TIM_OC3_SetConfig+0x10c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_OC3_SetConfig+0xbe>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <TIM_OC3_SetConfig+0x110>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_OC3_SetConfig+0xbe>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <TIM_OC3_SetConfig+0x118>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_OC3_SetConfig+0xbe>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <TIM_OC3_SetConfig+0x11c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_OC3_SetConfig+0xbe>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <TIM_OC3_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_OC3_SetConfig+0xbe>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a16      	ldr	r2, [pc, #88]	; (8003360 <TIM_OC3_SetConfig+0x114>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d113      	bne.n	8003332 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40015000 	.word	0x40015000
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <TIM_OC4_SetConfig+0x110>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <TIM_OC4_SetConfig+0x74>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <TIM_OC4_SetConfig+0x114>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_OC4_SetConfig+0x74>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <TIM_OC4_SetConfig+0x118>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10d      	bne.n	8003400 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <TIM_OC4_SetConfig+0x110>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d013      	beq.n	8003430 <TIM_OC4_SetConfig+0xc0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <TIM_OC4_SetConfig+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00f      	beq.n	8003430 <TIM_OC4_SetConfig+0xc0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <TIM_OC4_SetConfig+0x11c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00b      	beq.n	8003430 <TIM_OC4_SetConfig+0xc0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <TIM_OC4_SetConfig+0x120>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_OC4_SetConfig+0xc0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <TIM_OC4_SetConfig+0x124>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_OC4_SetConfig+0xc0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <TIM_OC4_SetConfig+0x118>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d113      	bne.n	8003458 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003436:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800343e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40013400 	.word	0x40013400
 8003488:	40015000 	.word	0x40015000
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800

08003498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <TIM_OC5_SetConfig+0xbc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <TIM_OC5_SetConfig+0x82>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <TIM_OC5_SetConfig+0xc0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00f      	beq.n	800351a <TIM_OC5_SetConfig+0x82>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a17      	ldr	r2, [pc, #92]	; (800355c <TIM_OC5_SetConfig+0xc4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_OC5_SetConfig+0x82>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <TIM_OC5_SetConfig+0xc8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <TIM_OC5_SetConfig+0x82>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <TIM_OC5_SetConfig+0xcc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_OC5_SetConfig+0x82>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <TIM_OC5_SetConfig+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d109      	bne.n	800352e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40013400 	.word	0x40013400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800
 8003568:	40015000 	.word	0x40015000

0800356c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a1a      	ldr	r2, [pc, #104]	; (800362c <TIM_OC6_SetConfig+0xc0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <TIM_OC6_SetConfig+0x84>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a19      	ldr	r2, [pc, #100]	; (8003630 <TIM_OC6_SetConfig+0xc4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00f      	beq.n	80035f0 <TIM_OC6_SetConfig+0x84>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <TIM_OC6_SetConfig+0xc8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_OC6_SetConfig+0x84>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <TIM_OC6_SetConfig+0xcc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_OC6_SetConfig+0x84>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <TIM_OC6_SetConfig+0xd0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC6_SetConfig+0x84>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <TIM_OC6_SetConfig+0xd4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d109      	bne.n	8003604 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	029b      	lsls	r3, r3, #10
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40013400 	.word	0x40013400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800
 8003640:	40015000 	.word	0x40015000

08003644 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0201 	bic.w	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <TIM_TI1_SetConfig+0xcc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01b      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d017      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a25      	ldr	r2, [pc, #148]	; (8003714 <TIM_TI1_SetConfig+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a24      	ldr	r2, [pc, #144]	; (8003718 <TIM_TI1_SetConfig+0xd4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00f      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a23      	ldr	r2, [pc, #140]	; (800371c <TIM_TI1_SetConfig+0xd8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00b      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <TIM_TI1_SetConfig+0xdc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a21      	ldr	r2, [pc, #132]	; (8003724 <TIM_TI1_SetConfig+0xe0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_TI1_SetConfig+0x66>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a20      	ldr	r2, [pc, #128]	; (8003728 <TIM_TI1_SetConfig+0xe4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <TIM_TI1_SetConfig+0x6a>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <TIM_TI1_SetConfig+0x6c>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e003      	b.n	80036ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f023 030a 	bic.w	r3, r3, #10
 80036e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f003 030a 	and.w	r3, r3, #10
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40013400 	.word	0x40013400
 8003724:	40014000 	.word	0x40014000
 8003728:	40015000 	.word	0x40015000

0800372c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 030a 	bic.w	r3, r3, #10
 8003768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800378a:	b480      	push	{r7}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 0210 	bic.w	r2, r3, #16
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	031b      	lsls	r3, r3, #12
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	621a      	str	r2, [r3, #32]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f023 0210 	bic.w	r2, r3, #16
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800382e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	621a      	str	r2, [r3, #32]
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 0303 	bic.w	r3, r3, #3
 8003890:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80038b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	621a      	str	r2, [r3, #32]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800391a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	031b      	lsls	r3, r3, #12
 8003920:	b29b      	uxth	r3, r3
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800392e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	031b      	lsls	r3, r3, #12
 8003934:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e074      	b.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a33      	ldr	r2, [pc, #204]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d01d      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a11      	ldr	r2, [pc, #68]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10c      	bne.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40015000 	.word	0x40015000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40014000 	.word	0x40014000

08003b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e096      	b.n	8003c92 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d106      	bne.n	8003c0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d12b      	bne.n	8003c80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	051b      	lsls	r3, r3, #20
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d106      	bne.n	8003c80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40013400 	.word	0x40013400
 8003ca8:	40015000 	.word	0x40015000

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <RGB_SET>:
  * @param  green state (0 = off, 1 = on)
  * @param  blue state (0 = off, 1 = on)
  * @retval none
  */
void RGB_SET(uint8_t red_state, uint8_t green_state, uint8_t blue_state)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
 8003d42:	460b      	mov	r3, r1
 8003d44:	71bb      	strb	r3, [r7, #6]
 8003d46:	4613      	mov	r3, r2
 8003d48:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, red_state);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2120      	movs	r1, #32
 8003d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d54:	f7fd fa7e 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, green_state);
 8003d58:	79bb      	ldrb	r3, [r7, #6]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2140      	movs	r1, #64	; 0x40
 8003d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d62:	f7fd fa77 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, blue_state);
 8003d66:	797b      	ldrb	r3, [r7, #5]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d70:	f7fd fa70 	bl	8001254 <HAL_GPIO_WritePin>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <setMotorASpeed>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim8;


void setMotorASpeed(uint8_t dutyCycle)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
	if(dutyCycle>100) dutyCycle=100;
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <setMotorASpeed+0x14>
 8003d8c:	2364      	movs	r3, #100	; 0x64
 8003d8e:	71fb      	strb	r3, [r7, #7]
	else if(dutyCycle<0) dutyCycle=0;

	// Set duty cycle of motors
	htim3.Instance->CCR2 = dutyCycle;
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <setMotorASpeed+0x28>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	79fa      	ldrb	r2, [r7, #7]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	200000c8 	.word	0x200000c8

08003da8 <setMotorBSpeed>:

void setMotorBSpeed(uint8_t dutyCycle)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
	if(dutyCycle>100) dutyCycle=100;
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b64      	cmp	r3, #100	; 0x64
 8003db6:	d901      	bls.n	8003dbc <setMotorBSpeed+0x14>
 8003db8:	2364      	movs	r3, #100	; 0x64
 8003dba:	71fb      	strb	r3, [r7, #7]
	else if(dutyCycle<0) dutyCycle=0;

	// Set duty cycle of motors
	htim8.Instance->CCR1 = dutyCycle;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <setMotorBSpeed+0x28>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	79fa      	ldrb	r2, [r7, #7]
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	2000002c 	.word	0x2000002c

08003dd4 <setMotorDirection>:

void setMotorDirection(uint8_t direction)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	// Set direction command signals to H Bridge Driver
	if(direction==FORWARD)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d117      	bne.n	8003e14 <setMotorDirection+0x40>
	{
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,1);
 8003de4:	2201      	movs	r2, #1
 8003de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dee:	f7fd fa31 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003df8:	484b      	ldr	r0, [pc, #300]	; (8003f28 <setMotorDirection+0x154>)
 8003dfa:	f7fd fa2b 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,1);
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2110      	movs	r1, #16
 8003e02:	4849      	ldr	r0, [pc, #292]	; (8003f28 <setMotorDirection+0x154>)
 8003e04:	f7fd fa26 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,0);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2120      	movs	r1, #32
 8003e0c:	4846      	ldr	r0, [pc, #280]	; (8003f28 <setMotorDirection+0x154>)
 8003e0e:	f7fd fa21 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,1);
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,1);
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,1);
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,1);
	}
}
 8003e12:	e085      	b.n	8003f20 <setMotorDirection+0x14c>
	else if(direction==REVERSE)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d117      	bne.n	8003e4a <setMotorDirection+0x76>
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e24:	f7fd fa16 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,1);
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e2e:	483e      	ldr	r0, [pc, #248]	; (8003f28 <setMotorDirection+0x154>)
 8003e30:	f7fd fa10 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,0);
 8003e34:	2200      	movs	r2, #0
 8003e36:	2110      	movs	r1, #16
 8003e38:	483b      	ldr	r0, [pc, #236]	; (8003f28 <setMotorDirection+0x154>)
 8003e3a:	f7fd fa0b 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,1);
 8003e3e:	2201      	movs	r2, #1
 8003e40:	2120      	movs	r1, #32
 8003e42:	4839      	ldr	r0, [pc, #228]	; (8003f28 <setMotorDirection+0x154>)
 8003e44:	f7fd fa06 	bl	8001254 <HAL_GPIO_WritePin>
}
 8003e48:	e06a      	b.n	8003f20 <setMotorDirection+0x14c>
	else if(direction==LEFT)
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d117      	bne.n	8003e80 <setMotorDirection+0xac>
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e5a:	f7fd f9fb 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,1);
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e64:	4830      	ldr	r0, [pc, #192]	; (8003f28 <setMotorDirection+0x154>)
 8003e66:	f7fd f9f5 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,1);
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	482e      	ldr	r0, [pc, #184]	; (8003f28 <setMotorDirection+0x154>)
 8003e70:	f7fd f9f0 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,0);
 8003e74:	2200      	movs	r2, #0
 8003e76:	2120      	movs	r1, #32
 8003e78:	482b      	ldr	r0, [pc, #172]	; (8003f28 <setMotorDirection+0x154>)
 8003e7a:	f7fd f9eb 	bl	8001254 <HAL_GPIO_WritePin>
}
 8003e7e:	e04f      	b.n	8003f20 <setMotorDirection+0x14c>
	else if(direction==RIGHT)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d117      	bne.n	8003eb6 <setMotorDirection+0xe2>
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,1);
 8003e86:	2201      	movs	r2, #1
 8003e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e90:	f7fd f9e0 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,0);
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e9a:	4823      	ldr	r0, [pc, #140]	; (8003f28 <setMotorDirection+0x154>)
 8003e9c:	f7fd f9da 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,0);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	4820      	ldr	r0, [pc, #128]	; (8003f28 <setMotorDirection+0x154>)
 8003ea6:	f7fd f9d5 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,1);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2120      	movs	r1, #32
 8003eae:	481e      	ldr	r0, [pc, #120]	; (8003f28 <setMotorDirection+0x154>)
 8003eb0:	f7fd f9d0 	bl	8001254 <HAL_GPIO_WritePin>
}
 8003eb4:	e034      	b.n	8003f20 <setMotorDirection+0x14c>
	else if(direction==HIGH_STOP)
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d117      	bne.n	8003eec <setMotorDirection+0x118>
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec6:	f7fd f9c5 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ed0:	4815      	ldr	r0, [pc, #84]	; (8003f28 <setMotorDirection+0x154>)
 8003ed2:	f7fd f9bf 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,0);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2110      	movs	r1, #16
 8003eda:	4813      	ldr	r0, [pc, #76]	; (8003f28 <setMotorDirection+0x154>)
 8003edc:	f7fd f9ba 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,0);
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	4810      	ldr	r0, [pc, #64]	; (8003f28 <setMotorDirection+0x154>)
 8003ee6:	f7fd f9b5 	bl	8001254 <HAL_GPIO_WritePin>
}
 8003eea:	e019      	b.n	8003f20 <setMotorDirection+0x14c>
	else if(direction==LOW_STOP)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d116      	bne.n	8003f20 <setMotorDirection+0x14c>
		HAL_GPIO_WritePin(H_Bridge1_Control1_GPIO_Port,H_Bridge1_Control1_Pin,1);
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003efc:	f7fd f9aa 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge1_Control2_GPIO_Port,H_Bridge1_Control2_Pin,1);
 8003f00:	2201      	movs	r2, #1
 8003f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f06:	4808      	ldr	r0, [pc, #32]	; (8003f28 <setMotorDirection+0x154>)
 8003f08:	f7fd f9a4 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control1_GPIO_Port,H_Bridge2_Control1_Pin,1);
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	2110      	movs	r1, #16
 8003f10:	4805      	ldr	r0, [pc, #20]	; (8003f28 <setMotorDirection+0x154>)
 8003f12:	f7fd f99f 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(H_Bridge2_Control2_GPIO_Port,H_Bridge2_Control2_Pin,1);
 8003f16:	2201      	movs	r2, #1
 8003f18:	2120      	movs	r1, #32
 8003f1a:	4803      	ldr	r0, [pc, #12]	; (8003f28 <setMotorDirection+0x154>)
 8003f1c:	f7fd f99a 	bl	8001254 <HAL_GPIO_WritePin>
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	48000400 	.word	0x48000400

08003f2c <getDistance>:
extern float distance;
extern TIM_HandleTypeDef htim4;


float getDistance()
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 1);
 8003f30:	2201      	movs	r2, #1
 8003f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3a:	f7fd f98b 	bl	8001254 <HAL_GPIO_WritePin>
	delay_us(10);
 8003f3e:	200a      	movs	r0, #10
 8003f40:	f7fc fcac 	bl	800089c <delay_us>
	HAL_GPIO_WritePin(trigPin_GPIO_Port, trigPin_Pin, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f4e:	f7fd f981 	bl	8001254 <HAL_GPIO_WritePin>

	return distance;
 8003f52:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <getDistance+0x34>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	ee07 3a90 	vmov	s15, r3
}
 8003f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200000c4 	.word	0x200000c4

08003f64 <HAL_TIM_IC_CaptureCallback>:

// CALLBACK FUNCTION FOR TIMER 4 CHANNEL 1
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7f1b      	ldrb	r3, [r3, #28]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d15c      	bne.n	800402e <HAL_TIM_IC_CaptureCallback+0xca>
	{
		if(is_time_captured==0)
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time_at_rising_edge = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	482f      	ldr	r0, [pc, #188]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003f80:	f7fe ff22 	bl	8002dc8 <HAL_TIM_ReadCapturedValue>
 8003f84:	4603      	mov	r3, r0
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003f8a:	801a      	strh	r2, [r3, #0]
			is_time_captured = 1;
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 020a 	bic.w	r2, r2, #10
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0202 	orr.w	r2, r2, #2
 8003fb0:	621a      	str	r2, [r3, #32]

			is_time_captured = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8003fb2:	e03c      	b.n	800402e <HAL_TIM_IC_CaptureCallback+0xca>
		else if(is_time_captured==1)
 8003fb4:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d138      	bne.n	800402e <HAL_TIM_IC_CaptureCallback+0xca>
			Time_at_falling_edge = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	481f      	ldr	r0, [pc, #124]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003fc0:	f7fe ff02 	bl	8002dc8 <HAL_TIM_ReadCapturedValue>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003fca:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
			if(Time_at_falling_edge>Time_at_rising_edge)
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d915      	bls.n	800400c <HAL_TIM_IC_CaptureCallback+0xa8>
				pulse_width = Time_at_falling_edge - Time_at_rising_edge;
 8003fe0:	4b18      	ldr	r3, [pc, #96]	; (8004044 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003fe2:	881a      	ldrh	r2, [r3, #0]
 8003fe4:	4b16      	ldr	r3, [pc, #88]	; (8004040 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003fee:	801a      	strh	r2, [r3, #0]
				distance = pulse_width / 59;
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_TIM_IC_CaptureCallback+0xec>)
 8004008:	edc3 7a00 	vstr	s15, [r3]
			is_time_captured = 0;
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 020a 	bic.w	r2, r2, #10
 8004020:	621a      	str	r2, [r3, #32]
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a12      	ldr	r2, [r2, #32]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000028 	.word	0x20000028
 800403c:	20000078 	.word	0x20000078
 8004040:	20000168 	.word	0x20000168
 8004044:	20000164 	.word	0x20000164
 8004048:	20000166 	.word	0x20000166
 800404c:	22b63cbf 	.word	0x22b63cbf
 8004050:	200000c4 	.word	0x200000c4

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4e0d      	ldr	r6, [pc, #52]	; (800408c <__libc_init_array+0x38>)
 8004058:	4c0d      	ldr	r4, [pc, #52]	; (8004090 <__libc_init_array+0x3c>)
 800405a:	1ba4      	subs	r4, r4, r6
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	2500      	movs	r5, #0
 8004060:	42a5      	cmp	r5, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	4e0b      	ldr	r6, [pc, #44]	; (8004094 <__libc_init_array+0x40>)
 8004066:	4c0c      	ldr	r4, [pc, #48]	; (8004098 <__libc_init_array+0x44>)
 8004068:	f000 f820 	bl	80040ac <_init>
 800406c:	1ba4      	subs	r4, r4, r6
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	2500      	movs	r5, #0
 8004072:	42a5      	cmp	r5, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800407c:	4798      	blx	r3
 800407e:	3501      	adds	r5, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004086:	4798      	blx	r3
 8004088:	3501      	adds	r5, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	080040d4 	.word	0x080040d4
 8004090:	080040d4 	.word	0x080040d4
 8004094:	080040d4 	.word	0x080040d4
 8004098:	080040d8 	.word	0x080040d8

0800409c <memset>:
 800409c:	4402      	add	r2, r0
 800409e:	4603      	mov	r3, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <_init>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr

080040b8 <_fini>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr
